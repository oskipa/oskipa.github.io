<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Dada Structures and Algorithms - log</title><link href="https://oskipa.github.io/" rel="alternate"></link><link href="https://oskipa.github.io/feeds/log.atom.xml" rel="self"></link><id>https://oskipa.github.io/</id><updated>2022-01-30T00:00:00-05:00</updated><entry><title>A Poor Philosopher</title><link href="https://oskipa.github.io/a-poor-philosopher.html" rel="alternate"></link><published>2022-01-30T00:00:00-05:00</published><updated>2022-01-30T00:00:00-05:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2022-01-30:/a-poor-philosopher.html</id><summary type="html">&lt;p&gt;I am a bad philosopher. I admit that I don't have a philosophy degree. I don't write philosophy papers. I don't keep up with philosophical trends. I get paid to write business software.&lt;/p&gt;
&lt;p&gt;Yet it is philosophy's method the one that use the most to understand the world. It is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am a bad philosopher. I admit that I don't have a philosophy degree. I don't write philosophy papers. I don't keep up with philosophical trends. I get paid to write business software.&lt;/p&gt;
&lt;p&gt;Yet it is philosophy's method the one that use the most to understand the world. It is what I do. We are what we do.&lt;/p&gt;
&lt;p&gt;I am somewhat surprised by this discovery. I should be saying "engineer" since that is closer to what I get paid for. Yet I couldn't explain what the engineering method is, beside of having to build software with money, time, and quality constraints. I admire mathematics, but I am a latecomer to the discipline, still struggling with it. I was exposed early on to sociology and anthropological methods. I admired both; I don't practice either.&lt;/p&gt;
&lt;p&gt;Economics is an emotionally hard discipline for me. This is because of its close connection with propaganda, from its beginning to this day. In the twentieth century, it was used by both the USSR and the USA. Among the social sciences, it is one that attempts to apply mathematics the most, trying to gain from mathematics its prestige. It has worked to some extent: there is no Nobel prize for psychology, but there is one for economics.&lt;/p&gt;
&lt;p&gt;For all of its desire to be rigorous, economics feels shaky and wrong to me. I don't objects to its use of mathematics; I don't know enough mathematics to know whether they are used correctly or incorrectly. It is the foundational premises of the discipline and how it is used in politics that I found sloppy. Furthermore, I feel that mathematics are the sheets that conceal the shakiness of its foundation.&lt;/p&gt;
&lt;p&gt;For a discipline that prides itself in rigerousness, it plays fast, loose, and reckless with its basic premises and assumptions. In fairness, it admits that it is grossly simplifying the world. Economics create a simple abstraction that is easy to comprehend. And for all of its thick sketches of reality, it is amazingly useful.&lt;/p&gt;
&lt;p&gt;What bothers me deeply is how from such a self-admiting shaky foundationyou end up with strong predictions. What starts are simple models turn into strong pronoucements on how society should be run. How we can justify complex real estate speculation because we have a model showing that it will be okay. That magically dictatorships will become democratic if we let people become rich without government supervision. If it were mare intellectual exercises, it would be fine. Yet people suffer because of these faulty intellectual exercises.&lt;/p&gt;
&lt;p&gt;This is not an attempt to show the deficiencies of economics. I don't know enough about economics to pursue that project.&lt;/p&gt;
&lt;p&gt;It is sharing this because this is how I realized that I am a bad philosopher. My objections are based on the philosophical method. There is a paper about how mathematics works ridiculously well when it shouldn't. Same with philosophy. For a method that is looser than mathematics, it does surprisingly well.&lt;/p&gt;
&lt;p&gt;What am I calling the philosophical method? When you find out reality by making definitions and following their consequences through deductive logic. Looser than mathematics because we cannot start from absolute certainty. Stronger than social sciences in that attempts to get as close to mathematical-inspired logic as possible. And yet still be something of a literature genre.&lt;/p&gt;
&lt;p&gt;I never intended to become a philosopher; less so a bad one. I somehow stumbled into it and made a habit from it. I am a bad philosopher because that is what I do. I am bad at it because that is the quality of my philosphizing. I am fine with this limitation, even when I strive to become better.&lt;/p&gt;
&lt;p&gt;I do bad philosophizing. We are what we do.&lt;/p&gt;</content><category term="log"></category><category term="philosophy"></category></entry><entry><title>What is good writing?</title><link href="https://oskipa.github.io/what-is-good-writing.html" rel="alternate"></link><published>2020-12-14T00:00:00-05:00</published><updated>2020-12-14T00:00:00-05:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-12-14:/what-is-good-writing.html</id><summary type="html">&lt;p&gt;As I was writing a brief review of Strunk and White's "The Elements of Style", I began articulating what my current ideas on what good writing consists in. I haven't thought about it for about 20 years. I realized that it had change since then. &lt;/p&gt;
&lt;p&gt;Good writing is about empathy …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As I was writing a brief review of Strunk and White's "The Elements of Style", I began articulating what my current ideas on what good writing consists in. I haven't thought about it for about 20 years. I realized that it had change since then. &lt;/p&gt;
&lt;p&gt;Good writing is about empathy. You have a message you want to share with an audience. You imagine how your audience would like to hear it. You imagine yourself as the audience. You adapt your communication style for that audience.&lt;/p&gt;
&lt;p&gt;Audience is the most important consideration when writing. Audience determines the writing style, vocabulary, word usage, and even grammar. We do this out of respect and empathy for the audience. You must change your regular vocabulary, spelling, or grammar so that your audience will listen, you do it, even if it breaks the conventions of common academic English.&lt;/p&gt;
&lt;p&gt;Good writing keeps your audience focused on your message. Anything that distracts the audience from your message is a problem with your writing. &lt;/p&gt;
&lt;p&gt;Genres and conventions help audiences to know what to expect. Priests should talk like priests. Rappers should talk like rappers. Historical fiction shouldn't have laser guns that come out of nowhere. Political commentary shouldn't break into poetry. Convention breaking pulls away from the message.&lt;/p&gt;
&lt;p&gt;Failing to meet the audience expectations is how they get distracted. Common examples of these distractions are misspellings or grammar mistakes. Word usage can be distracting for some, when used in the wrong context. Breaking a genre convention, if not done correctly or deliberately, will be confusing and distracting. Once distracted it is hard for the audience to focus again on the message. Be empathetic: the audience is already giving their time to listen to what you have to say. Don't distract them. &lt;/p&gt;
&lt;p&gt;You want to develop the skills to write in common English so that people can focus on your message. Many will get distracted if they run into "incorrect English." People who disagree with your message will point out mistakes to distract others. These distractions often become attacks on your intelligence, your education, and your social class. Be empathetic with the rest of the audience and with yourself. Avoid this scenario in the first place. Run the spell and grammar check to avoid the biggest mistakes. Put down your draft and review it the next day. &lt;/p&gt;
&lt;p&gt;Logical organization parallel sentences, and unambigous sentences help people understand you.&lt;/p&gt;
&lt;p&gt;Good writing is about empathy. It is having empathy towards your audience and yourself. Although the last century has focused so much about how writing is the ultimately individual act, its ultimate purpose is to share with others. It is through sharing our opinions how we help to shape others; and through others sharing their opinions how they help to shape us. Writing is the ultimate communal act.&lt;/p&gt;
&lt;p&gt;May your good writing help create a better world.&lt;/p&gt;</content><category term="log"></category><category term="writing"></category></entry><entry><title>Thoughts on Python's iterators</title><link href="https://oskipa.github.io/thoughts-on-pythons-iterators.html" rel="alternate"></link><published>2020-08-07T00:00:00-04:00</published><updated>2020-08-07T00:00:00-04:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-08-07:/thoughts-on-pythons-iterators.html</id><summary type="html">&lt;p&gt;I just read &lt;a href="https://dbader.org/blog/python-iterators"&gt;Dan Bader's blog on iterators&lt;/a&gt; [1]. Iterators were this fuzzy concept that sort of made sense, yet never did. I understood that they were there and how to use them. I read the blog, I try the example, and it clicks.&lt;/p&gt;
&lt;p&gt;The summary is that an iterator …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I just read &lt;a href="https://dbader.org/blog/python-iterators"&gt;Dan Bader's blog on iterators&lt;/a&gt; [1]. Iterators were this fuzzy concept that sort of made sense, yet never did. I understood that they were there and how to use them. I read the blog, I try the example, and it clicks.&lt;/p&gt;
&lt;p&gt;The summary is that an iterator is an object that will give you one item from a collection at a time. Once it gets to the end, it signals that there are no more items. In Python it does this via a StopIteration exception. The "for x  in" expression seems to know how to handle these iterators.&lt;/p&gt;
&lt;p&gt;Once again, Python makes the complex easy to understand. I recall taking a C++ class. I got an A in the course. I still didn't feel confident with OOP. Then I spend some time writing a chip simulator using Python. And OOP clicked. It made sense.&lt;/p&gt;
&lt;p&gt;Python sits in a weird place. It is both an academic and an industry language. It could be that this duality allows it to a balance between making things terse enough so you can get the intention quickly, yet not too terse that you can't understand. It worked like that 20 years ago. It still works today.&lt;/p&gt;
&lt;p&gt;This example has made me think again about the Python Data Model that works along with those funky underscore methods like __iter__. They seem to be the key to this behavior. Also the key to a lot of Python's goodness. The Python Data Model will be the next think I tackle.&lt;/p&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;p&gt;[1] D. Bader. &lt;em&gt;Python Iterators: A Step-By-Step Introduction&lt;/em&gt;. dbader.org.  &lt;a href="https://dbader.org/blog/python-iterators"&gt;https://dbader.org/blog/python-iterators&lt;/a&gt; (accessed August 8, 2020)&lt;/p&gt;</content><category term="log"></category><category term="python"></category></entry><entry><title>Python's args and kwargs</title><link href="https://oskipa.github.io/pythons-args-and-kwargs.html" rel="alternate"></link><published>2020-08-05T00:00:00-04:00</published><updated>2020-08-05T00:00:00-04:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-08-05:/pythons-args-and-kwargs.html</id><summary type="html">&lt;h3&gt;tldr&lt;/h3&gt;
&lt;p&gt;The *args and **kwargs parameter pattern is a way to collect an unknown number of function arguments. The names "args" and "kwargs" is a convention; the important part is the single or double star. A single star will return the arguments as a list. The double start will return …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;tldr&lt;/h3&gt;
&lt;p&gt;The *args and **kwargs parameter pattern is a way to collect an unknown number of function arguments. The names "args" and "kwargs" is a convention; the important part is the single or double star. A single star will return the arguments as a list. The double start will return the argument as a dictionary.&lt;/p&gt;
&lt;h3&gt;The long story&lt;/h3&gt;
&lt;p&gt;Sometimes you need to give your function a variable number of arguments. You don't know in advance how many you are going to need. Let's say that you want to create a function that gives you the sum of some numbers. You don't know how many number there will be. That is when you use *args &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;  &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;def&lt;/span&gt; &lt;span class="nv"&gt;sum&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;args&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;:
  ...   &lt;span class="nb"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  ...   &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;args&lt;/span&gt;:
  ...    &lt;span class="nb"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt; 
  ...   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;result&lt;/span&gt;
  ...
  &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;sum&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
  &lt;span class="mi"&gt;10&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;sum&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;,&lt;span class="mi"&gt;20&lt;/span&gt;,&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
  &lt;span class="mi"&gt;60&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Wouldn't it be nice if there was something similar for dictionaries? There is! That is what **kwargs is for. Let's write a function that updates a dictionary with new values.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;apple&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;ball&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;cat&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;apple&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;deer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;apple&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ball&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;deer&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For more details, read the article on &lt;a href="https://book.pythontips.com/en/latest/args_and_kwargs.html"&gt;args and kwargs&lt;/a&gt; [1], which is the basis of this entry.
References:&lt;/p&gt;
&lt;p&gt;[1] M. Y. U. Khalid, &lt;em&gt;Python Tips&lt;/em&gt;, &lt;a href="https://book.pythontips.com/en/latest/args_and_kwargs.html"&gt;https://book.pythontips.com/en/latest/args_and_kwargs.html&lt;/a&gt;, (accessed  5 August, 2020).&lt;/p&gt;</content><category term="log"></category><category term="python"></category></entry><entry><title>Python's doctest</title><link href="https://oskipa.github.io/pythons-doctest.html" rel="alternate"></link><published>2020-07-31T00:00:00-04:00</published><updated>2020-07-31T00:00:00-04:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-07-31:/pythons-doctest.html</id><summary type="html">&lt;h3&gt;tldr&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3/library/doctest.html"&gt;doctest&lt;/a&gt; [1]  is a library that allows you to write python examples in comments or text documents. This is handy because you can write examples, test them, and have the peace of mind that they work. &lt;/p&gt;
&lt;p&gt;Here are some examples example&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;print&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Hello World!&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;Hello&lt;/span&gt; &lt;span class="nv"&gt;World&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;


    &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;def&lt;/span&gt; &lt;span class="nv"&gt;one_plus …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h3&gt;tldr&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3/library/doctest.html"&gt;doctest&lt;/a&gt; [1]  is a library that allows you to write python examples in comments or text documents. This is handy because you can write examples, test them, and have the peace of mind that they work. &lt;/p&gt;
&lt;p&gt;Here are some examples example&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;print&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Hello World!&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;Hello&lt;/span&gt; &lt;span class="nv"&gt;World&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;


    &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;def&lt;/span&gt; &lt;span class="nv"&gt;one_plus_one&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;:
    ...   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    ...
    &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;one_plus_one&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;
    &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see, the key is to use the three arrows, &amp;gt;&amp;gt;&amp;gt;, to write the python that you would execute in the console. The result is written lined up after the &amp;gt;&amp;gt;&amp;gt; prompt. If you have a multi-line code sample, like when you are writing a function, you must enter the three dots, ... , and then line up the code as you would when writing python.&lt;/p&gt;
&lt;p&gt;To test your code, you need to have a script that imports doctest. I looked it up on the internet. The solution I found was&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;EOF&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;doctest&lt;/span&gt;
    &lt;span class="n"&gt;doctest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;testfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pythons_doctest.md&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is enough to get you going. Of course there is a lot more to it. Please consult [1] for more information.&lt;/p&gt;
&lt;h3&gt;The long story&lt;/h3&gt;
&lt;p&gt;One of the most awkward bits when writing about programming is writing examples in your articles and having to copy-and-past them into a script, run them, and then having to fix your article. It is not difficult. It is cumbersome. You leave a text editor to go into the console and you must add libraries and whatever you need to prepare to run the examples.&lt;/p&gt;
&lt;p&gt;doctest makes it easier to write your examples in the docs. Or you could write the examples on the interactive console and copy-and-paste the expressions and results into the document you are writing. I first learned about these libraries from Elixir, which encourages writing documentation with examples that can be tested with their document testing library. As I started writing these small entries on Python, I decided that it would be handy to have examples that can be tested before I publish them.&lt;/p&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;p&gt;[1] &lt;em&gt;doctest -- Test interactive Python examples&lt;/em&gt; docs.python.org &lt;a href="https://docs.python.org/3/library/doctest.html"&gt;https://docs.python.org/3/library/doctest.html&lt;/a&gt; (accessed, July 31, 2020)&lt;/p&gt;</content><category term="log"></category><category term="python"></category></entry><entry><title>Python's yield</title><link href="https://oskipa.github.io/pythons-yield.html" rel="alternate"></link><published>2020-07-30T00:00:00-04:00</published><updated>2020-07-30T00:00:00-04:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-07-30:/pythons-yield.html</id><summary type="html">&lt;h2&gt;The short answer&lt;/h2&gt;
&lt;p&gt;Python's 'yield' is used instead of 'result' when you are creating results via a generator function. Think of generators as some sort of a lazy, stateful function that returns one item at a time. Why would we want that? We would want this when consuming a huge …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;The short answer&lt;/h2&gt;
&lt;p&gt;Python's 'yield' is used instead of 'result' when you are creating results via a generator function. Think of generators as some sort of a lazy, stateful function that returns one item at a time. Why would we want that? We would want this when consuming a huge amount of data that can't be loaded all at once into memory. Think of a giant csv file. &lt;/p&gt;
&lt;p&gt;So the point of a generator is to have a function that can give you one item at a time and remember where it was the next time you call it.  &lt;/p&gt;
&lt;p&gt;Here is an example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; # &lt;span class="nv"&gt;we&lt;/span&gt; &lt;span class="nv"&gt;create&lt;/span&gt; &lt;span class="nv"&gt;our&lt;/span&gt; &lt;span class="nv"&gt;generator&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;def&lt;/span&gt; &lt;span class="nv"&gt;up_to_10&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;:
    ...   &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;range&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;:
    ...     &lt;span class="nv"&gt;yield&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;
    ...
    &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; # &lt;span class="nv"&gt;we&lt;/span&gt; &lt;span class="nv"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;it&lt;/span&gt; 
    &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;up_to_10&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;:
    ...   &lt;span class="nv"&gt;print&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    ...
    &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="mi"&gt;4&lt;/span&gt;
    &lt;span class="mi"&gt;5&lt;/span&gt;
    &lt;span class="mi"&gt;6&lt;/span&gt;
    &lt;span class="mi"&gt;7&lt;/span&gt;
    &lt;span class="mi"&gt;8&lt;/span&gt;
    &lt;span class="mi"&gt;9&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;The longer story&lt;/h2&gt;
&lt;p&gt;My example seems silly since we could achieve the same with a range or with a list. My guess is that generators are useful to implement laziness. You could create a library that queries a  database, but will only make the call it when you actually need it. I can also see how we can use generators to create infinite series.&lt;/p&gt;
&lt;p&gt;'yield' trips me up coming from Ruby. 'yield' does something different in Ruby: it executes a block that has been passed to the method.&lt;/p&gt;
&lt;p&gt;Python's 'yield' seems closer to C#'s yield. Sadly, I never fully understood C#'s yield. From this blog, it looks like it is similar to Pyton's yield. &lt;a href="https://www.kenneth-truyers.net/2016/05/12/yield-return-in-c/"&gt;https://www.kenneth-truyers.net/2016/05/12/yield-return-in-c/&lt;/a&gt;[3]&lt;/p&gt;
&lt;p&gt;You can read more about 'yield' and generators at &lt;a href="https://www.geeksforgeeks.org/use-yield-keyword-instead-return-keyword-python/"&gt;https://www.geeksforgeeks.org/use-yield-keyword-instead-return-keyword-python/&lt;/a&gt;[1] and at its PEP[2]&lt;/p&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;p&gt;[1] A. Agarwal, "When to use yield instead of return in Python?" GeeksForGeeks. &lt;a href="https://www.geeksforgeeks.org/use-yield-keyword-instead-return-keyword-python/"&gt;https://www.geeksforgeeks.org/use-yield-keyword-instead-return-keyword-python/&lt;/a&gt; (accessed July 30, 2020)&lt;/p&gt;
&lt;p&gt;[2] N. Schemenauer, T. Peters, M. Lie Hetland, PEP 255. Python &lt;a href="https://www.python.org/dev/peps/pep-0255/"&gt;https://www.python.org/dev/peps/pep-0255/&lt;/a&gt;(accessed July 30, 2020)&lt;/p&gt;
&lt;p&gt;[3] K. Truyers, &lt;em&gt;Yield return in C#&lt;/em&gt;, kenneth-truyers.net, &lt;a href="https://www.kenneth-truyers.net/2016/05/12/yield-return-in-c/"&gt;https://www.kenneth-truyers.net/2016/05/12/yield-return-in-c/&lt;/a&gt;(accessed July 31, 2020)&lt;/p&gt;</content><category term="log"></category><category term="python"></category></entry><entry><title>Python's with</title><link href="https://oskipa.github.io/pythons-with.html" rel="alternate"></link><published>2020-07-28T00:00:00-04:00</published><updated>2020-07-28T00:00:00-04:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-07-28:/pythons-with.html</id><summary type="html">&lt;h3&gt;The point&lt;/h3&gt;
&lt;p&gt;The "with" statement can be thought as syntactical sugar that replaces a try: except: finally: block with a cleaner syntax.&lt;/p&gt;
&lt;p&gt;Let's focus on the practical application of with. This is an example taken from the PEP. You will see how clear the code is. What you see is …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;The point&lt;/h3&gt;
&lt;p&gt;The "with" statement can be thought as syntactical sugar that replaces a try: except: finally: block with a cleaner syntax.&lt;/p&gt;
&lt;p&gt;Let's focus on the practical application of with. This is an example taken from the PEP. You will see how clear the code is. What you see is your actual code rather than ceremonial templates.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;  &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;opened&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;/etc/passwd&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;f&lt;/span&gt;:
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;line&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;f&lt;/span&gt;:
          &lt;span class="nv"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;line&lt;/span&gt;.&lt;span class="nv"&gt;rstrip&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This would be equivalent to something like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;  &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

  &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/etc/passwd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exc_info&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
  &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see, using "with" is cleaner.&lt;/p&gt;
&lt;p&gt;The one catch is that the object must fit some conditions for it to work with the "with" statement. File objects since Python 2.5 meet them. You can also create objects that can play nicely along "with."&lt;/p&gt;
&lt;h3&gt;The long story&lt;/h3&gt;
&lt;p&gt;A friend told me that I should look into Python's "with" because he said that it trips some people new to the language. I found this document doing an online search &lt;a href="https://www.python.org/dev/peps/pep-0343/"&gt;PEP 343, the with statement&lt;/a&gt;[1]. This document goes into detail on the evolution of the feature and how to use it. If you have time and you are interested, you should read this document.&lt;/p&gt;
&lt;p&gt;As a side note, the Python Enhancement Proposal (PEP), seems to be a great documentation project. I need to think about this and see how workplaces can adopt something like this to document design decisions over time.&lt;/p&gt;
&lt;p&gt;Back to with! In practical terms, "with" is some sort of syntactical sugar that allows you to avoid writing template try: except: finally:  blocks of code. It seems similar to the "using" statement in c#. For us to be able to use a "with" statement, the object needs to support __enter__() and __exit__() methods. The PEP quoted above goes into detail on the requirements for "with" to work.&lt;/p&gt;
&lt;p&gt;If you find the PEP document too overwhelming, as I did, you can also look at the following blog entry by Fredrik Lundh, &lt;a href="https://effbot.org/zone/python-with-statement.htm"&gt;Understanding Python's "with" statement&lt;/a&gt;[2].&lt;/p&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;p&gt;[1]  &lt;a href="https://www.python.org/dev/peps/pep-0343/"&gt;PEP 343, the with statement&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2]  Lundh, Fredrik &lt;a href="https://effbot.org/zone/python-with-statement.htm"&gt;Understanding Python's "with" statement&lt;/a&gt;&lt;/p&gt;</content><category term="log"></category><category term="python"></category></entry><entry><title>On Misspelling</title><link href="https://oskipa.github.io/on-misspelling.html" rel="alternate"></link><published>2020-07-22T00:00:00-04:00</published><updated>2020-07-22T00:00:00-04:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-07-22:/on-misspelling.html</id><summary type="html">&lt;p&gt;English is notoriously hard to spell. It is perhaps one of the biggest hurdles that people learning English have to go through, after learning how to make English sounds. Yet language learners and native speakers can both share in the frustration of its spelling system.&lt;/p&gt;
&lt;p&gt;One would think that the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;English is notoriously hard to spell. It is perhaps one of the biggest hurdles that people learning English have to go through, after learning how to make English sounds. Yet language learners and native speakers can both share in the frustration of its spelling system.&lt;/p&gt;
&lt;p&gt;One would think that the speakers of such a hard language to write would be forgiving when people misspell words. I believe that most people are in day-to-day communication. Yet in situations that matter in people's lives, such as getting a job or doing a sales pitch, having a misspelling can bring judgement, contempt, and rejection to the unfortunate author.&lt;/p&gt;
&lt;p&gt;Like drivers, people think they are better at it than most people. Just like drivers, most people are worse than they think. Personally I have gone through periods where I believe I was an excellent speller. Then I lived through periods where I was an embarrassingly bad speller. I have fluctuated between okay and bad ever since. My lifetime spelling achievement puts me in the mediocre category.&lt;/p&gt;
&lt;p&gt;But why? If I were consistently good, I would attribute it, like most people who are consistently good at spelling, to my superior mind and education. If I were consistently bad, I would attribute that to a poor education, or a learning disability, and secretly I would suffer thinking that I had an inferior mind.&lt;/p&gt;
&lt;p&gt;But my spelling power fluctuates. Spelling inconsistently feeds my vanity and my anxieties. But why? Why? I have come up with the following guesses on why my spelling is mediocre and why it varies.&lt;/p&gt;
&lt;p&gt;My misspellings go up when I am tired. For a number of years, I had bad sleep, so my spelling got worse. My sentences also become strange. In the last few years I have used frequent misspelling as a personal alert for me to go to sleep.&lt;/p&gt;
&lt;p&gt;Another trait that I have is that I seem to be a strong mimic. I will see and copy what I am exposed to. So during my college years I was exposed to a lot of professionally proofread writing, so my spelling was excellent. When I taught middle school for a year and I was exposed to kids still learning how to spell, my spelling became horrible. If I am reading in Spanish, then some Spanish spelling begins to creep in English. If I am learning another language, let's say Latin, then I adopt Latin spelling. It is not like English is the only language affected. I recently noticed that I was writing English-inspired Spanish.&lt;/p&gt;
&lt;p&gt;One solution for this mimicry side effect is that I can stop reading in other languages. Yet I enjoy that so much I am not going to stop. I need to learn how to live with it.&lt;/p&gt;
&lt;p&gt;I also attribute a lot of misspelling to my writing haze, this mental state where I am in a frenzy to write down thoughts. While in this state, I don't see misspellings or grammatical mistakes.&lt;/p&gt;
&lt;p&gt;Yesterday I thought about another possible reason. Maybe it is a bad habit.  Perhaps internet communication, with its short, meaningless exchanges, has encouraged me to be sloppy. I don't care because the bulk of what I write online doesn't matter.&lt;/p&gt;
&lt;p&gt;I am guessing that all the above contribute to poor misspelling. Now I am trying to figure out how to improve my spelling.&lt;/p&gt;
&lt;p&gt;One of the key features of English spelling is that you more or less have to memorize how a word is written. The task ahead of us is one of memorization, so mnemonic tactics should be use. To better learn the spelling of words, we need to guess its origin, since English has different spelling and pronunciation rules for words that come from different languages.&lt;/p&gt;
&lt;p&gt;I am planning on making a list of words I have misspelled so that I can practice those. I will probably use Anki to practice. I have been having a problem with how exactly make cards for it, since I would see the correct answer as the solution. Or I could write the misspelling of a word and then correct it. But then I would be exposing myself to misspellings, and my mimicry trait could learn the misspellings instead. I could also write the pronunciation transcript. Maybe it is best if I make recordings of the word and then I have to write it out.&lt;/p&gt;
&lt;p&gt;There are probably spelling bee quiz programs that I can use to test myself every so often.&lt;/p&gt;
&lt;p&gt;I will try it out and report how my efforts went.&lt;/p&gt;</content><category term="log"></category><category term="writing"></category></entry><entry><title>Slow writing</title><link href="https://oskipa.github.io/slow-writing.html" rel="alternate"></link><published>2020-07-20T00:00:00-04:00</published><updated>2020-07-20T00:00:00-04:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-07-20:/slow-writing.html</id><summary type="html">&lt;p&gt;In the last year I have found it hard to write. It feels that it is hard to express what I am thinking in sentences. When I do write, I notice weaknesses in my logic; in my construction of sentences; in the grammar of the sentences; and a lot of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the last year I have found it hard to write. It feels that it is hard to express what I am thinking in sentences. When I do write, I notice weaknesses in my logic; in my construction of sentences; in the grammar of the sentences; and a lot of misspellings.&lt;/p&gt;
&lt;p&gt;I have thought a lot about this. I mainly attribute it to what I call "the writing haze." When I write, I find myself in this hazy state where I can't see grammatical mistakes or typos. I can start seeing them about 30 to 60 minutes after, once the haze goes away.&lt;/p&gt;
&lt;p&gt;I thought the solution was to revise the next day. Yet while revising I sometimes found the first draft so lacking that I would try writing a new original draft. I ended up again in the writing haze; I, once again, couldn't see errors.&lt;/p&gt;
&lt;p&gt;This morning I was thinking about it. I linked the writing haze with quick, scan reading, which also leads me to have a hazy mind which I can call "the reading haze." That reading haze so uncomfortable that about five years ago I decided to read deliberately slow. It has yielded great results. My reading retention has improved. Reading literature has once again become a vivid experience. Reading a chapter at a time lets me think about what I read, allowing me to chew on ideas.&lt;/p&gt;
&lt;p&gt;I decided to do the writing equivalent of slow reading: slow writing. Maybe if I write slowly I will avoid entering in the writing haze, the same way reading slowly prevents one from entering in the reading haze. Maybe slow writing will encourage deliberate thinking. I am hoping that will be the case.&lt;/p&gt;
&lt;p&gt;I will report how well it worked some time in the future.&lt;/p&gt;</content><category term="log"></category><category term="writing"></category></entry><entry><title>pyenv starter pack</title><link href="https://oskipa.github.io/pyenv-starter-pack.html" rel="alternate"></link><published>2020-07-17T00:00:00-04:00</published><updated>2020-07-17T00:00:00-04:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-07-17:/pyenv-starter-pack.html</id><summary type="html">&lt;p&gt;In my transition from Ruby to Python, I quickly found that there was a familiar experience that made me feel like I never left the Ruby: libraries won't work well in certain language versions.&lt;/p&gt;
&lt;p&gt;The common solution for this problem is to find a version manager. For personal projects I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In my transition from Ruby to Python, I quickly found that there was a familiar experience that made me feel like I never left the Ruby: libraries won't work well in certain language versions.&lt;/p&gt;
&lt;p&gt;The common solution for this problem is to find a version manager. For personal projects I have been using &lt;a href="https://pypi.org/project/pipenv/"&gt;pipenv&lt;/a&gt;, which feels like an enhanced version of bundler that also handles the language version along with virtual environments. Whoa! But they are not using pyenv at work yet.&lt;/p&gt;
&lt;p&gt;This week at work I learned to use pyenv. &lt;a href="https://github.com/pyenv/pyenv"&gt;Pyenv&lt;/a&gt; is a python version manager that knows how to work along with &lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;virtualenv&lt;/a&gt;, python's virtual environment tool. What follows is my cheat sheet on how to use it. It is based on &lt;a href="https://realpython.com/intro-to-pyenv/"&gt;Logan Jones's article&lt;/a&gt; in Real Python [1].&lt;/p&gt;
&lt;p&gt;Check which python versions are available&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pyenv versions
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Install a version of python&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pyenv install 3.6.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;See what versions of python you have installed&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pyenv versions
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Create a virtual environment with a specific python version&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pyenv virtualenv 3.3.1 chunkybacon
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To manually activate and deactivate an environment&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pyenv activate chunkybacon
pyenv deactivate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To see which environments you have&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pyenv virtualenvs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you want to learn how to install pyenv and go deeper on how to use it, please read the article that is the source of this cheat sheet.&lt;/p&gt;
&lt;p&gt;References: 
1. &lt;a href="https://realpython.com/intro-to-pyenv/"&gt;Managing Multiple Python Versions With pyenv&lt;/a&gt; By Logan Jones&lt;/p&gt;</content><category term="log"></category><category term="python"></category></entry><entry><title>Why don't we practice self-reflection in Agile?</title><link href="https://oskipa.github.io/agile-self-reflection.html" rel="alternate"></link><published>2020-06-01T00:00:00-04:00</published><updated>2020-06-01T00:00:00-04:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-06-01:/agile-self-reflection.html</id><summary type="html">&lt;p&gt;Self-reflection is my favorite part from agile. Call it a retrospective or a post-mortem; at the end of the day it is self-reflection. This is the self-correcting mechanism. You see what you have done. If it is not working, you do something else. If it perhaps the essence of agile …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Self-reflection is my favorite part from agile. Call it a retrospective or a post-mortem; at the end of the day it is self-reflection. This is the self-correcting mechanism. You see what you have done. If it is not working, you do something else. If it perhaps the essence of agile. You can give up on everything, but if you keep practicing self-reflection and self-correction, you are doing it correctly. &lt;/p&gt;
&lt;p&gt;It is also the least practiced one. If practiced, it is most likely poorly done. Self-reflection is about accepting reality. Accepting reality is hard. You need three elements for self-reflection to work: maturity to accept reality, safety to point it out, and power to improve things. &lt;/p&gt;
&lt;p&gt;If these conditions don't exist, then doing a retrospective becomes an empty ritual. In the best of cases it is a waste of time. In the worst, it can become a bullying session. In both cases it becomes unpleasant, so people will try to avoid doing it.  &lt;/p&gt;
&lt;p&gt;Accepting reality is the biggest challenge. It takes emotional maturity for individuals and organizations, which are made from those individuals. &lt;/p&gt;
&lt;p&gt;Individually we find it painful to accept reality because we are afraid that it will shatter our self image. We may not be as productive as we were. We may have forgotten a lot about working in css. We may be struggling to learn iOS development. It is common that most of us will rather deny these realities because they force us to change the our self narrative. We avoid this pain.&lt;/p&gt;
&lt;p&gt;Acknowledging these short comings can help us overcome them. If we notice we are less productive, we can start looking for the cause. Maybe we are not sleeping enough. Maybe we need to get a book on css. Maybe asking the iOS developer for help can overcome the change. Yet before we can act on the deficiencies, we need to identify and acknowledge them.  &lt;/p&gt;
&lt;p&gt;We find a similar dynamic as a group, in our teams. Even if we have team members that can handle reality, the team as a whole may not be able to do so. This is where safety and power comes into play. Those in power must make it safe to have team members bring up reality and act on suggestions.&lt;/p&gt;
&lt;p&gt;Let's say that a deadline was missed. The team knows it was missed because the schedule was overly optimistic. If members don't feel safe to point it out because they can be punished for doing so, they won't. People will become yes men out of necessity. Leadership will increasingly find themselves in a parallel reality where their beliefs are reality -- until reality reassesses itself, often in painful ways. &lt;/p&gt;
&lt;p&gt;Maybe the team can be mature enough to acknowledge reality, but they lack power to make changes. If a schedule is too optimistic, you need to add more slack to it. But the team manager may not have the power to do that. Or it was identified that the team needs training in a new technology executives decided to adopt. But they won't give them the budget. &lt;/p&gt;
&lt;p&gt;Retrospectives then become a ritual that teaches learned helplessness. People will become jaded. They will resent the ritual because it is meaningless.&lt;/p&gt;
&lt;p&gt;In reality most of us work in places where the conditions are not ideal. What to do? As individuals we can practice self-reflection ourselves, and act within our power. If it is safe, we can model this with coworkers. This is what each of us can do to foster a culture of self-reflection and safety.&lt;/p&gt;
&lt;p&gt;If you are a manager you have greater power to shape culture. There are two things that are important to create this culture. The first one is to honestly model self-reflection. The stress is on the honesty. The second one is to act on suggestions.&lt;/p&gt;
&lt;p&gt;If you were responsible for the optimistic schedule, you can acknowledge that, and adjust it. Say something like, "I forgot to include slack for people getting sick" or "I didn't take into consideration the mandatory corporate retreat". Then you need to follow through fixing the schedule.&lt;/p&gt;
&lt;p&gt;Let's say that in a retrospective workers say slack is too distracting, and they need 4 hours where they can turn it off so they can focus on work. The manager wants to make sure that people can still be reached within reasonable periods of time. The manager says that they can turn off slack for two hours, check messages and answer them then, and then turn it off for another two hours. The team most likely be pleased. It may not be 4 hours solid, but getting two focus segments are better than none.&lt;/p&gt;
&lt;p&gt;We must keep in mind that power is often limited, so we can sometimes only do modest changes. Hopefully those changes can build up over time and we can then reap the benefits of self-reflection.&lt;/p&gt;</content><category term="log"></category><category term="software-engineering"></category></entry><entry><title>Goals over Process</title><link href="https://oskipa.github.io/goals-over-process.html" rel="alternate"></link><published>2020-05-30T00:00:00-04:00</published><updated>2020-05-30T00:00:00-04:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-05-30:/goals-over-process.html</id><summary type="html">&lt;p&gt;Sometimes when we learn a new methodology we become eager to implement it. It is like buying a new board game and being eager to play it with others.  &lt;/p&gt;
&lt;p&gt;In our zeal to implement these methodologies, we may lose track that a methodology is a means to achieve a goal …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Sometimes when we learn a new methodology we become eager to implement it. It is like buying a new board game and being eager to play it with others.  &lt;/p&gt;
&lt;p&gt;In our zeal to implement these methodologies, we may lose track that a methodology is a means to achieve a goal. The discipline is not the goal itself. Yet it is so easy to fall into the trap of making the discipline the goals.&lt;/p&gt;
&lt;p&gt;What is the goal of methodologies like agile or waterfall? It is to give some organization to software development. Ideally to create working habits that give managers the information they need while giving workers predictable working environment. &lt;/p&gt;
&lt;p&gt;Ultimately what managers need is to know what is the state of a project in terms of completion and schedule. This is necessary to make decisions to keep a project on schedule. To a lesser extent they need to know how their workers are performing. This is necessary to identify problems and provide training if possible. &lt;/p&gt;
&lt;p&gt;Workers need a reasonable work process. They need to have the necessary autonomy, training, and tools. They need a safe environment so that they can focus on their work rather than office politics.&lt;/p&gt;
&lt;p&gt;Keeping in mind these goals, we can adapt methodology principles to actual workplaces when we join them. &lt;/p&gt;
&lt;p&gt;If a team shares their daily tasks on a slack channel, that fulfills the information needs for the  manager. There isn't a need to introduce a stand up meeting. You may love the stand up ritual, but if you force on people who don't want to do it, they will resent you for wasting their time. At the end of the day the manager is still getting the information they need.&lt;/p&gt;
&lt;p&gt;Process is a tool. If some behavior exists that already fulfill the goal, then the pragmatic decision is to keep that behavior.&lt;/p&gt;</content><category term="log"></category><category term="process"></category></entry><entry><title>Find and Replace Recursively</title><link href="https://oskipa.github.io/find-and-replace-recursively.html" rel="alternate"></link><published>2020-05-27T00:00:00-04:00</published><updated>2020-05-27T00:00:00-04:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-05-27:/find-and-replace-recursively.html</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;grep -rl &amp;quot;Chunky&amp;quot; . | LC_ALL=C xargs sed -i &amp;quot;.bak&amp;quot;  &amp;quot;s/Chunky/Bacon/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Every so often we need to mass edit some directories. That should be the job of sed. Yet sed doesn't find files, so you need another utility. There you have a choice of tools. For this case …&lt;/p&gt;</summary><content type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;grep -rl &amp;quot;Chunky&amp;quot; . | LC_ALL=C xargs sed -i &amp;quot;.bak&amp;quot;  &amp;quot;s/Chunky/Bacon/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Every so often we need to mass edit some directories. That should be the job of sed. Yet sed doesn't find files, so you need another utility. There you have a choice of tools. For this case I decided to use grep. Although I use ack for searching patterns, I thought that grep would be the right tool here.&lt;/p&gt;
&lt;p&gt;Now the explanation of the example.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Magical bit&lt;/th&gt;
&lt;th&gt;Explanation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;grep&lt;/td&gt;
&lt;td&gt;Our second favorite tool for finding patterns in files. Our favorite is ack, but grep is more appropriate here.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-rl&lt;/td&gt;
&lt;td&gt;Our grep options. r = recursive search. l = output the name of the files&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;"Chunky"&lt;/td&gt;
&lt;td&gt;Our pattern&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;The direction we want to search. In this case, start from the current directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;the pipe&lt;/td&gt;
&lt;td&gt;The magic unix character that lets us pass output into another command&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LC_ALL=C&lt;/td&gt;
&lt;td&gt;The esoteric incantation to have sed behave in MacOS. It has to do with encoding&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;xargs&lt;/td&gt;
&lt;td&gt;Unix utility to transform standard input into command arguments&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sed&lt;/td&gt;
&lt;td&gt;Our batch editor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-i&lt;/td&gt;
&lt;td&gt;The option to edit in place&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;".bak"&lt;/td&gt;
&lt;td&gt;The extension that we want to give to the backup file that sed -i will create&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;"s/Chunky/Bacon/"&lt;/td&gt;
&lt;td&gt;The sed command we want to execute. In this case substitute Chunky with Bacon&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;You can clean up the backup files with &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;grep -rl &amp;quot;Chunky&amp;quot; . | xarg rm -f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="log"></category><category term="shell"></category><category term="unix"></category><category term="linux"></category><category term="macos"></category></entry><entry><title>The Five Minutes Problem</title><link href="https://oskipa.github.io/the-five-minutes-problem.html" rel="alternate"></link><published>2020-04-24T00:00:00-04:00</published><updated>2020-04-24T00:00:00-04:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-04-24:/the-five-minutes-problem.html</id><summary type="html">&lt;p&gt;In fields like chess, math, and computer science, you need to do the problems to learn. You cannot learn just by watching a lecture. It is a skill that one must cultivate via doing.&lt;/p&gt;
&lt;p&gt;But the question is, how much should you spend on a problem that you cannot solve …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In fields like chess, math, and computer science, you need to do the problems to learn. You cannot learn just by watching a lecture. It is a skill that one must cultivate via doing.&lt;/p&gt;
&lt;p&gt;But the question is, how much should you spend on a problem that you cannot solve?&lt;/p&gt;
&lt;p&gt;One school of thought is that you keep at that problem until you can solve it by yourself. It seems to make sense. If you put enough effort, you will discover the solution. Or find a novel one. Unfortunately you may not find a solution, so you can stop playing chess or learning math if you strikingly stick to this method.&lt;/p&gt;
&lt;p&gt;A better method is to timebox how much time you spend on solving a puzzle. The rule of thumb is that you should find the basic solution within five minutes. &lt;/p&gt;
&lt;p&gt;For those five minutes, you will attempt to solve the problem all by yourself. You have to give it your all. If you solved it, good! Pat yourself in the back!&lt;/p&gt;
&lt;p&gt;If you don't, you look at the answer. &lt;/p&gt;
&lt;p&gt;If this cheating? No. Problem solving is about pattern recognition. If you couldn't find a solution, you couldn't find a pattern. That means you haven't learned that pattern.&lt;/p&gt;
&lt;p&gt;By spending those earnest five minutes trying to solve the problem, you will understand the problem well. You will understand why your natural solution didn't work. When you look at the solution, it is meaningful. Your emotional reaction to seeing the solution will make it easier for you to remember it, creating that desire pattern for you to recognize the next time you see a similar problem.&lt;/p&gt;
&lt;p&gt;I also learned this tactic by looking at the solution. I found this strategy in a chess book, which in turn adopted it from what seems to be a math teaching tactic in Russia.&lt;/p&gt;</content><category term="log"></category><category term="learning"></category><category term="comp sci"></category><category term="math"></category></entry><entry><title>Looping in Ruby</title><link href="https://oskipa.github.io/looping-in-ruby.html" rel="alternate"></link><published>2020-04-22T00:00:00-04:00</published><updated>2020-04-22T00:00:00-04:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-04-22:/looping-in-ruby.html</id><summary type="html">&lt;p&gt;Looping in Ruby is usually a delight. The idiomatic way of doing it is via #each on &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;animals&lt;/span&gt;.&lt;span class="nv"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nv"&gt;beast&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="nv"&gt;beast&lt;/span&gt;.&lt;span class="nv"&gt;roar&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Sometimes you need the index. So you call in #each_with_index&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;animals&lt;/span&gt;.&lt;span class="nv"&gt;each_with_index&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nv"&gt;beast&lt;/span&gt;, &lt;span class="nv"&gt;index&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="nv"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;#{beast} #{index} says: #{beast.roar} &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;end …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Looping in Ruby is usually a delight. The idiomatic way of doing it is via #each on &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;animals&lt;/span&gt;.&lt;span class="nv"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nv"&gt;beast&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="nv"&gt;beast&lt;/span&gt;.&lt;span class="nv"&gt;roar&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Sometimes you need the index. So you call in #each_with_index&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;animals&lt;/span&gt;.&lt;span class="nv"&gt;each_with_index&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nv"&gt;beast&lt;/span&gt;, &lt;span class="nv"&gt;index&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="nv"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;#{beast} #{index} says: #{beast.roar} &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you feel functional, then you can use one of the Enumerable methods.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;animals&lt;/span&gt;.&lt;span class="nv"&gt;map&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nv"&gt;beast&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="nv"&gt;beast&lt;/span&gt;.&lt;span class="nv"&gt;roar&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For 90% of your looping needs, #each, or an Enumerable, #map, #select, #any?, #all?, etc, will do.&lt;/p&gt;
&lt;p&gt;If you are working with a queue or a stack, you can always use the classic where loop&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;where&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;stack&lt;/span&gt;.&lt;span class="nv"&gt;empty&lt;/span&gt;?
  &lt;span class="nv"&gt;ghost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;stack&lt;/span&gt;.&lt;span class="nv"&gt;pop&lt;/span&gt;
  &lt;span class="nv"&gt;pacman&lt;/span&gt;.&lt;span class="nv"&gt;chomp&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ghost&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Yet every so often you will get to some problem where a classic for loop would be perfect. This is where it becomes awkward. Ruby doesn't have a classic for loop.&lt;/p&gt;
&lt;p&gt;There is a for loop. But it is not C style for loop. Instead it loops over a collection. Usually a list or a range.&lt;/p&gt;
&lt;p&gt;This is how it works. This will go by each element.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;list&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nv"&gt;puts&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In effect, it is a wordy version of #each. Therefore most people use #each.&lt;/p&gt;
&lt;p&gt;But we want a C style for! Because sometimes using indices is the right solution to a problem. Even though we don't have something just like it, we can build something close to it.&lt;/p&gt;
&lt;p&gt;Let's say you want something like this from C#&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can replicate it by doing something like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here we are using a range. So we will cycle through 0 to list.length - 1. We get that -1 automatically by using the ... range operator that says that we don't want to include the last number. If you wanted to include the last number, we would have written (0..list.length), but this would throw and out of range error when it got to the last item.&lt;/p&gt;
&lt;p&gt;But what do you do when you want to go backwards? We can come up with something as well.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;to_a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reverse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here we start with the range. We turn it into an array, and then we call reverse. Wordy? Yes. Does it get the job done? Also yes. &lt;/p&gt;
&lt;p&gt;The good news is that these are rare scenarios.&lt;/p&gt;</content><category term="log"></category><category term="ruby"></category></entry><entry><title>Getting Started With Byebug</title><link href="https://oskipa.github.io/intro-byebug.html" rel="alternate"></link><published>2020-04-21T00:00:00-04:00</published><updated>2020-04-21T00:00:00-04:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-04-21:/intro-byebug.html</id><summary type="html">&lt;p&gt;This is a very quick guide/checklist on how to install and get debugging with Byebug, a Ruby debugger.&lt;/p&gt;
&lt;h2&gt;Installing byebug&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gem install byebug
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or add to your Gemfile&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gem byebug
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Setting a breakpoint and starting a session&lt;/h2&gt;
&lt;p&gt;To add the point where byebug will start the session in your …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is a very quick guide/checklist on how to install and get debugging with Byebug, a Ruby debugger.&lt;/p&gt;
&lt;h2&gt;Installing byebug&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gem install byebug
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or add to your Gemfile&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gem byebug
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Setting a breakpoint and starting a session&lt;/h2&gt;
&lt;p&gt;To add the point where byebug will start the session in your code, essentially, the breakpoint, you type the method "byebug" in your code. If your code looks like this,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;def&lt;/span&gt; &lt;span class="nv"&gt;my_awesome_function&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;
  &lt;span class="nv"&gt;process&lt;/span&gt;
  &lt;span class="nv"&gt;log&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You would set the breakpoint like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;def&lt;/span&gt; &lt;span class="nv"&gt;my_awesome_function&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;
  &lt;span class="nv"&gt;byebug&lt;/span&gt;
  &lt;span class="nv"&gt;process&lt;/span&gt;
  &lt;span class="nv"&gt;log&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you are running your code directly, the running should stop when your code reaches the line with byebug. If you are using something like foreman, then you have the option to connect to a sockets session on another terminal tab.&lt;/p&gt;
&lt;h2&gt;The debugger screen&lt;/h2&gt;
&lt;p&gt;Once byebug starts its session, you will see the debugger screen. This screen will give you the file name, and then some lines of the code. There will be a arrow showing you the current place where the code execution has stopped.&lt;/p&gt;
&lt;p&gt;To step over the next line of code, enter "next".&lt;/p&gt;
&lt;p&gt;To step into the next line of code, enter "step"&lt;/p&gt;
&lt;p&gt;To step out, enter, "finish". This last one doesn't seem to work as I would want it to, so sometimes I have to enter it several times.&lt;/p&gt;
&lt;p&gt;If by querying values you can't see the code where you are stopped, you can get the listing back by typing "list =".&lt;/p&gt;
&lt;p&gt;To let the program run, type "continue".&lt;/p&gt;
&lt;h2&gt;Navigating the Stack Trace&lt;/h2&gt;
&lt;p&gt;To see the stack trace, type "backtrack". This should give you a pretty output of the stack trace.&lt;/p&gt;
&lt;p&gt;If you want to go back in the stack trace so that you can query the environment at a previous point in the execution, type "up".&lt;/p&gt;
&lt;p&gt;Once you are done doing your exploring, you can come back to later points by typing "down".&lt;/p&gt;
&lt;h2&gt;Querying current values&lt;/h2&gt;
&lt;p&gt;Perhaps one of the most important things you can do in the debugging console is to query the value of different variables.&lt;/p&gt;
&lt;p&gt;You can examine variables by typing their name and hitting enter.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;(byebug) name
&amp;quot;My name&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Trying out solutions&lt;/h2&gt;
&lt;p&gt;If you think you found a way to solve your bug, you can try the solution directly in the console to see if it works out.&lt;/p&gt;
&lt;h2&gt;Learning more&lt;/h2&gt;
&lt;p&gt;The debugger becomes a better tool if your add to it an understanding on Ruby's object model and method dispatch. Having a good command on Ruby's reflection methods also helps.&lt;/p&gt;
&lt;p&gt;For more information on Byebug itself and to explore other command, look at its documentation on github https://github.com/deivid-rodriguez/byebug&lt;/p&gt;</content><category term="log"></category><category term="ruby"></category><category term="byebug"></category></entry><entry><title>Functional Programming in OCaml, 1-2</title><link href="https://oskipa.github.io/functional-programming-in-ocaml-1-2.html" rel="alternate"></link><published>2020-03-14T00:00:00-04:00</published><updated>2020-03-14T00:00:00-04:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-03-14:/functional-programming-in-ocaml-1-2.html</id><summary type="html">&lt;p&gt;&lt;a href="https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/"&gt;Functional Programming in OCaml&lt;/a&gt; is an online book compiled by Michael R. Clarkson. It is used by Cornell University for their functional programming course.&lt;/p&gt;
&lt;p&gt;I enjoyed reading chapter one. They explain the goals and purpose of the class that the book supports. It also has a great section on the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/"&gt;Functional Programming in OCaml&lt;/a&gt; is an online book compiled by Michael R. Clarkson. It is used by Cornell University for their functional programming course.&lt;/p&gt;
&lt;p&gt;I enjoyed reading chapter one. They explain the goals and purpose of the class that the book supports. It also has a great section on the history of the  book and the course. It tells how the class was originally based on &lt;a href="http://sarabander.github.io/sicp/html/index.xhtml#SEC_Contents"&gt;Structure and Interpretation of Computer Programs&lt;/a&gt;, (SICP). From the challenges of teaching SICP, they changed languages, from Scheme to OCaml, and they developed the textbook from their class notes. This is fascinating because it is a similar experience that lead to the development of &lt;a href="https://racket-lang.org/"&gt;Racket&lt;/a&gt; and the supporting book &lt;a href="https://htdp.org/"&gt;How To Design Programs&lt;/a&gt;. I will probably talk more about how SICP, a beloved textbook, lead to the creation of other books in a future entry.&lt;/p&gt;
&lt;p&gt;Chapter 2 is an introduction to OCaml as a language. I have read a number of tutorials and several chapters on other OCaml books, and "Functional Programming in Ocaml" seems to be one of the clearest explanations on the basics of OCaml. If for some reason you didn't understand the topic well enough from this text, at the end of the chapter the authors tell you which chapters from others OCaml books you should read to get an alternate explanation of the same topics.&lt;/p&gt;
&lt;p&gt;There is a caveat to the previous statement. It will be clear if you have a basic understanding on lambda calculus and you are familiar with how modern  mathematics defines concepts. If you are not familiar with these, the text should be more challenging. &lt;/p&gt;
&lt;p&gt;The exercises for chapter 2 were good. You get to face the difference between integer operators such as +, -, * , /, versus the floating point operators, like +., -., * . / .. &lt;/p&gt;</content><category term="log"></category><category term="ocaml"></category><category term="notes"></category></entry><entry><title>Survival Ruby Reflection</title><link href="https://oskipa.github.io/survival-ruby-reflection.html" rel="alternate"></link><published>2020-03-10T00:00:00-04:00</published><updated>2020-03-10T00:00:00-04:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-03-10:/survival-ruby-reflection.html</id><summary type="html">&lt;p&gt;Ruby has a strong reflection system. This is useful when you are debugging. The more you know, the easier debugging will be. But if you are starting, the following ones will make your life better. &lt;/p&gt;
&lt;p&gt;my_object.inspect&lt;/p&gt;
&lt;p&gt;This will give you a string representation of the object. Very useful …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ruby has a strong reflection system. This is useful when you are debugging. The more you know, the easier debugging will be. But if you are starting, the following ones will make your life better. &lt;/p&gt;
&lt;p&gt;my_object.inspect&lt;/p&gt;
&lt;p&gt;This will give you a string representation of the object. Very useful when programming and debugging.&lt;/p&gt;
&lt;p&gt;my_object.respond_to?(:method_name)&lt;/p&gt;
&lt;p&gt;This one will tell you if the object can respond to a method. So Let's say that you want to call &lt;code&gt;batman.swing&lt;/code&gt;. But can you? You can query the object with &lt;code&gt;batman.respond_to?(:swing)&lt;/code&gt; and it will answer with true or false. Notice how you need to use the colon for the method name when sent as a parameter.&lt;/p&gt;
&lt;p&gt;my_object.methods
   (my_object.methods - Object.new.methods).sort&lt;/p&gt;
&lt;p&gt;The first one will list all the methods that the object can respond to. Depending on the object, the list can be large. Once you look through them, you will discover that many of the methods were not defined in the class itself.  The last version will remove all of the methods that are inherited by Object, the root parent object that most object descend from.&lt;/p&gt;
&lt;p&gt;my_object.method(:method_name).source_location&lt;/p&gt;
&lt;p&gt;This is perhaps the most useful one when looking for code. This incantation will give you the source location for the method that the object responds to.&lt;/p&gt;</content><category term="log"></category><category term="ruby"></category><category term="rails"></category></entry><entry><title>When you Are New To Rails</title><link href="https://oskipa.github.io/when-you-are-new-to-rails.html" rel="alternate"></link><published>2020-03-09T00:00:00-04:00</published><updated>2020-03-09T00:00:00-04:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-03-09:/when-you-are-new-to-rails.html</id><summary type="html">&lt;p&gt;Are you an experienced developer? Have you been tasked to help out in a Rails project? Do you feel confused because there are no 'require' statements and variables seem to mushroom out of nowhere? Does Rails seem too magical to you? &lt;/p&gt;
&lt;p&gt;If this describes you, don't worry. I have gathered …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Are you an experienced developer? Have you been tasked to help out in a Rails project? Do you feel confused because there are no 'require' statements and variables seem to mushroom out of nowhere? Does Rails seem too magical to you? &lt;/p&gt;
&lt;p&gt;If this describes you, don't worry. I have gathered this quick list of pointers to help you find your bearing. Hopefully they will make Rails more logical and less magic.&lt;/p&gt;
&lt;h3&gt;Rails loads all objects found under the 'app' directory into the global scope&lt;/h3&gt;
&lt;p&gt;This is why you don't see 'require' statements. Most objects are available in the global scope.&lt;/p&gt;
&lt;p&gt;Why? Think of it as a radical kind of Don't Repeat Yourself (DRY). Whether you think this is a good idea doesn't matter. This is a Rails convention.&lt;/p&gt;
&lt;p&gt;The title statement may be a gross oversimplification. Yet it will be helpful if you assume this is true unless proven wrong. &lt;/p&gt;
&lt;h3&gt;Carefully read the error messages&lt;/h3&gt;
&lt;p&gt;Ruby errors are usually useful. They tell you what went wrong along with the location where the problem happened.&lt;/p&gt;
&lt;p&gt;Ruby's error stack trace will usually give you the file and line number where the failure has happened. This is key for solving problems. The stack trace will usually have a mix of code from our application and from Ruby libraries, commonly called gems. &lt;/p&gt;
&lt;p&gt;Read them like this: starting from the top, scan line by line until you recognize a file from your application. Identify the file and line number, and start your debugging there. &lt;/p&gt;
&lt;h3&gt;Learn about Ruby's method dispatch and reflection&lt;/h3&gt;
&lt;p&gt;Ruby does what you expect until it doesn't. It will all seem magical and confusing unless you understand how method dispatch works.&lt;/p&gt;
&lt;p&gt;Method dispatch is Ruby's process of looking for a method definition to execute it. When you call 'batman.punch', method dispatch is trying to find where the '.punch' is. It start looking for a definition in the object's class, and then it goes up the object's ancestors. That is the basic idea.  &lt;/p&gt;
&lt;p&gt;The basic idea is also wrong. It is more complicated than that. Read this blog post to get an accurate picture: &lt;a href="https://blog.jcoglan.com/2013/05/08/how-ruby-method-dispatch-works/"&gt;How Ruby method dispatch works&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ruby has a strong reflection system. You can query a lot of information from an object. Using reflection methods is more useful if you understand how method dispatch works. But even if you don't, the following two methods will be useful right away.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;batman.inspect
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;'.inspect' gives you a string representation of the 'batman' object. Useful in the interactive ruby shell (irb), in the debugger, or  when printing to the log or a debugger via a 'puts object.inspect'.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;batman.methods
batman.methods.sort
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;'.methods' gives you an array of all of the methods that the 'batman' object can respond to.  If you add '.sort', then they will be sorted alphabetically.&lt;/p&gt;
&lt;p&gt;If you want more in depth information, read chapters 2 and 3 from the book &lt;a href="https://pragprog.com/book/ppmetr2/metaprogramming-ruby-2"&gt;Metaprogramming Ruby 2&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;The docs: Ruby Doc, Rails Guides, The Rail Way, and the source code&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ruby-doc.org/"&gt;Ruby Doc&lt;/a&gt; should help you if you have questions about the language. The documentation is well written and useful. Ruby is programmer friendly, so if want a method to do something to an array, it most likely exists. I often consult &lt;a href="https://ruby-doc.org/core-2.7.0/Array.html"&gt;Array&lt;/a&gt;, &lt;a href="https://ruby-doc.org/core-2.7.0/Hash.html"&gt;Hash&lt;/a&gt;, &lt;a href="https://ruby-doc.org/core-2.7.0/String.html"&gt;String&lt;/a&gt;, and &lt;a href="https://ruby-doc.org/core-2.7.0/Enumerable.html"&gt;Enumerable&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://guides.rubyonrails.org/"&gt;Rails Guides&lt;/a&gt; should be your first option to learn anything about Rails. For example, if you are learning about Active Record or how to make a configuration change, you should consult this site first.&lt;/p&gt;
&lt;p&gt;You can't find what you are looking for?&lt;/p&gt;
&lt;p&gt;&lt;a href="https://leanpub.com/tr5w"&gt;The Rails Way&lt;/a&gt; should be your next stop. Look for the correct Rails version for your application. It has clear and in-depth explanations on how the different parts of Rails work. &lt;/p&gt;
&lt;p&gt;Still mystified or confused?&lt;/p&gt;
&lt;p&gt;Read &lt;a href="https://github.com/rails/rails"&gt;Rails' source code&lt;/a&gt;. It is recommended for you to look the source code up if all of the above have failed. Read it if you are curious on how something is put together. Read it if you need to check exactly when some feature was added or removed. &lt;/p&gt;
&lt;h3&gt;Use a debugger&lt;/h3&gt;
&lt;p&gt;Ruby has two popular command line debuggers, Pry and Byebug. When you add their name your code, it will open an interactive, command line  shell where you can inspect values, query the variables available in the global space, and do a lot more. &lt;/p&gt;
&lt;p&gt;If you have learned about Ruby's method dispatch and Ruby's reflection methods, the debugger will help you understand how everything gets put together.&lt;/p&gt;
&lt;p&gt;The debugger is perhaps the best tool to understand Rails: use it.&lt;/p&gt;
&lt;p&gt;Identify which debugger your app is using. Learn how to use it, and learn some of its commands. If there isn't one installed, spend some time to get Byebug set up.&lt;/p&gt;</content><category term="log"></category><category term="ruby"></category><category term="rails"></category></entry><entry><title>Using Pelican</title><link href="https://oskipa.github.io/using-pelican.html" rel="alternate"></link><published>2020-03-08T00:00:00-05:00</published><updated>2020-03-08T00:00:00-05:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-03-08:/using-pelican.html</id><summary type="html">&lt;p&gt;I am in the process of cleaning up the site so that I can start writing again. I have decided that I do two kinds of writing. One is very careful; it is essentially writing what should be real articles. The second type are quick learning notes. My ideal site …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am in the process of cleaning up the site so that I can start writing again. I have decided that I do two kinds of writing. One is very careful; it is essentially writing what should be real articles. The second type are quick learning notes. My ideal site would have a section for those more well thought out pieces and one for the quicker, study notes.&lt;/p&gt;
&lt;p&gt;After looking for a while, I decided that Pelican should be able to make it easy for me to get these two things done.&lt;/p&gt;
&lt;p&gt;I have found that I have enjoyed working with Pelican. It is easy to use and easy to customize. The documentation is superb. And if you run into something that is not covered, you can find the answer with a web search.&lt;/p&gt;
&lt;p&gt;I have liked using the make command to build and publish the site. It seems to make things easier.&lt;/p&gt;
&lt;p&gt;Finally, Pelican is easy to understand. After you have worked a bit, you find that most settings are python constants found in the settings page. There are few surprises, for which I am grateful.&lt;/p&gt;</content><category term="log"></category><category term="python"></category><category term="static site"></category></entry><entry><title>Django, first impressions</title><link href="https://oskipa.github.io/django-first-impressions.html" rel="alternate"></link><published>2020-03-07T00:00:00-05:00</published><updated>2020-03-07T00:00:00-05:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-03-07:/django-first-impressions.html</id><summary type="html">&lt;p&gt;I am working through the Django tutorial. Here are some thoughts.&lt;/p&gt;
&lt;p&gt;There really aren't any controllers. Interesting.&lt;/p&gt;
&lt;p&gt;The instant admin area is amazing. &lt;/p&gt;
&lt;p&gt;Pluggable apps are such a great idea.&lt;/p&gt;
&lt;p&gt;The way to define fields seems pretty straight forward. Using a more object style versus a more ruby-like dsl seems …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am working through the Django tutorial. Here are some thoughts.&lt;/p&gt;
&lt;p&gt;There really aren't any controllers. Interesting.&lt;/p&gt;
&lt;p&gt;The instant admin area is amazing. &lt;/p&gt;
&lt;p&gt;Pluggable apps are such a great idea.&lt;/p&gt;
&lt;p&gt;The way to define fields seems pretty straight forward. Using a more object style versus a more ruby-like dsl seems to help because finding the documentation should be easier.&lt;/p&gt;
&lt;p&gt;This is different from other frameworks. I like the idea of having a language module as the components.&lt;/p&gt;</content><category term="log"></category><category term="python"></category><category term="django"></category></entry><entry><title>A Friendly GUI Debugger for Ruby</title><link href="https://oskipa.github.io/ruby-gui-debugger.html" rel="alternate"></link><published>2020-03-01T00:00:00-05:00</published><updated>2020-03-01T00:00:00-05:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-03-01:/ruby-gui-debugger.html</id><summary type="html">&lt;p&gt;I have been learning Smalltalk. Smalltalk is very similar to Ruby. And Smalltalk have these great programming tools. I am particularly impressed by the object browser and it debugger. Smalltalk was designed so that the system would be learnable. If you wondered how something worked, you could inspect the object …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have been learning Smalltalk. Smalltalk is very similar to Ruby. And Smalltalk have these great programming tools. I am particularly impressed by the object browser and it debugger. Smalltalk was designed so that the system would be learnable. If you wondered how something worked, you could inspect the object and see how it was put together.&lt;/p&gt;
&lt;p&gt;Ruby is very similar to Smalltalk. And pry and byebug along with irb and the rails console  are a command line version of the Smalltalk debugger and object browser. Yet it requires some level of training to use it. You have to know which commands to use that belong to byebug or to ruby to get the information that you are looking for.&lt;/p&gt;
&lt;p&gt;Although I understand that many experienced rubyists may find the command line interface for the debuggers better, a GUI front for byebug would be a great help for beginners. These beginners could be both people new to coding or experienced programmers new to Ruby, who are used to these kinds of tools.&lt;/p&gt;
&lt;p&gt;I am hoping to have the time to create a simple prototype of what this GUI could look like, and then try it out. Who knows? Maybe I will agree with the rest of the community and decide that the command line interface is superior. &lt;/p&gt;</content><category term="log"></category><category term="ruby"></category><category term="metaprogramming"></category><category term="book"></category></entry></feed>