<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Dada Structures and Algorithms - article</title><link href="https://oskipa.github.io/" rel="alternate"></link><link href="https://oskipa.github.io/feeds/article.atom.xml" rel="self"></link><id>https://oskipa.github.io/</id><updated>2020-06-06T00:00:00-04:00</updated><entry><title>Power makes you stupid</title><link href="https://oskipa.github.io/power-makes-you-stupid.html" rel="alternate"></link><published>2020-06-06T00:00:00-04:00</published><updated>2020-06-06T00:00:00-04:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-06-06:/power-makes-you-stupid.html</id><summary type="html">&lt;p&gt;We all have heard how power corrupts and absolute power corrupts absolutely. Probably more worrisome is that power stupifies and absolute power stupefies absolutely.&lt;/p&gt;
&lt;p&gt;Although we have been taught that intelligence is an indivual trait, it is to a large extend a communal one. Humans are social animals. What we …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We all have heard how power corrupts and absolute power corrupts absolutely. Probably more worrisome is that power stupifies and absolute power stupefies absolutely.&lt;/p&gt;
&lt;p&gt;Although we have been taught that intelligence is an indivual trait, it is to a large extend a communal one. Humans are social animals. What we know, what we decide to spend our time on, and what ideas we have are shaped by the people we socialize.&lt;/p&gt;
&lt;p&gt;Yes, each person has a raw intelligence. But how effective it is depends on who their circle of peers are. I like to think about it  this way: you might have bought a Ferrari that can go 210mph, but if you only drive around city streets, your effective max speed is 30mph.&lt;/p&gt;
&lt;p&gt;Your effective intelligence is bound by who you socialize with and people feeling free to tell you that you are wrong. Assuming that you are surrounded by smart, intelligent people, let's explore how power can reduce your effective intelligence.&lt;/p&gt;
&lt;p&gt;There are many facets to power, but one of them is the ability to harm people. If you are a supervisor, a manager, or an executive, you have the ability to harm people by firing them. You may never think in those terms, or even consider firing people for disagreeing with you, but the people with less power will interact with you aware of this possibility.&lt;/p&gt;
&lt;p&gt;If you can't handle bad news, different opinions, or being told that you are wrong, your subordinates quickly will pick this up and adapt to it. If you crave attention and flattery, your subordinates will grant it to you.&lt;/p&gt;
&lt;p&gt;Quickly the checks-and-balances of our human group disappears. Our human brains are weak, so we start to believe that we are smarter than we are. We are more likable than we are. That we are more competent that we are.&lt;/p&gt;
&lt;p&gt;All of the above is well know. What does it have to do with intelligence? If you are wrong and are not corrected by others, you will stay in the wrong. You will hold onto incorrect ideas. You will stick to bad decisions. You are that Ferrari driving on a 10mph road. &lt;/p&gt;
&lt;p&gt;So what to do? You need to build trust with your people that you can handle bad news and criticism. This is not easy, yet it is necessary.&lt;/p&gt;
&lt;p&gt;Start by stating that you welcome comments on how to improve things. Then when those comments come in, you must stay calm and thank people for the feedback. Then you  must follow through. This is tricky because you won't agree on proposed changes all the time. That is fine. You still should listen and implement changes frequently enough so that people trust that you are listening.&lt;/p&gt;
&lt;p&gt;In short, learn to listen. Your intelligence depends on it.&lt;/p&gt;</content><category term="article"></category><category term="management"></category><category term="leadership"></category></entry><entry><title>Frameworks Should Make it Easy</title><link href="https://oskipa.github.io/frameworks-should-make-it-easy.html" rel="alternate"></link><published>2020-06-03T00:00:00-04:00</published><updated>2020-06-03T00:00:00-04:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-06-03:/frameworks-should-make-it-easy.html</id><summary type="html">&lt;p&gt;Frameworks should make your work easier. Yes, there will be moments when you will have to fight with the framework to get something done. These cases should be rare. In general, you should not think about a framework or be happy when using it. &lt;/p&gt;
&lt;p&gt;Ideally a framework lets you get …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Frameworks should make your work easier. Yes, there will be moments when you will have to fight with the framework to get something done. These cases should be rare. In general, you should not think about a framework or be happy when using it. &lt;/p&gt;
&lt;p&gt;Ideally a framework lets you get your work done. It makes it easy to customize some behavior. It gets out of the way in other cases. It becomes invisible when you are working with business logic.&lt;/p&gt;
&lt;p&gt;DotNet's Mvc and PHP's CodeIgniter are two frameworks that meet most of these criteria. Elixir's Phoenix seems to fit it too, but I need more experience working with it to make a stronger statement.&lt;/p&gt;
&lt;p&gt;If you find yourself fighting too much with the framework, it may be an indication that you may move onto something else. It may be faster and easier to write something yourself. Toss it.&lt;/p&gt;</content><category term="article"></category><category term="software engineering"></category><category term="programming"></category></entry><entry><title>Listen instead of getting buy in</title><link href="https://oskipa.github.io/listen-instead-of-getting-buy-in.html" rel="alternate"></link><published>2020-05-06T00:00:00-04:00</published><updated>2020-05-06T00:00:00-04:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-05-06:/listen-instead-of-getting-buy-in.html</id><summary type="html">&lt;p&gt;I learned recently that product owners and managers are trained to seek team members to buy-in into new process, goals, or plans. This was an unfortunate word selection. It undermines building trust in a team. It frames the relationship between managers and workers the wrong way.&lt;/p&gt;
&lt;p&gt;"Buy-in" sets a narrative …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I learned recently that product owners and managers are trained to seek team members to buy-in into new process, goals, or plans. This was an unfortunate word selection. It undermines building trust in a team. It frames the relationship between managers and workers the wrong way.&lt;/p&gt;
&lt;p&gt;"Buy-in" sets a narrative where the manager wants something that the workers are resistant to do. The goal of the manager becomes getting that buy-in, that verbal agreement. The manager becomes a hard pressure salesman. Workers are reluctant customers. A successful manager, like a hard pressure saleman, making that sale no matter what. In hard pressure sales, you will ignore objections. All you want is an explicit or implicit yes, even if it is not real. &lt;/p&gt;
&lt;p&gt;A better approach is to listen. Everyone wants to succeed. As a manager you may have a vision to implement, either personal or given by your supervisors. Your workers know the obstacles that are in the way to get that done.&lt;/p&gt;
&lt;p&gt;Let me give you an example. Upper management learned about threaded programming. They want the project to use threaded programming. It should make response time faster. Fair enough. You go to your team and you announce this. The team tells you that it is not a good idea because the legacy project is using Ruby, and Ruby's thread model is not robust.&lt;/p&gt;
&lt;p&gt;If the manager has a buy-in mentality, they will think that the workers are stuck in their ways. That they don't want to adapt to new ideas. the manager's task now is somehow to win them over and agree to do the task that must be done. It sets an adversarial relation with the works. It is easy to ignore what the workers are telling you because you need that win. The manager does some googling and finds that there are threads in Ruby. The devs must be ignorant and are too prideful to accept that. When an unrelated PR comes, he asks for the solution to be using threads. &lt;/p&gt;
&lt;p&gt;Let's switch the frame where the manager listens respectfully. Rather than ignore what the engineers are saying, he listens. There are risks ahead. Now the manager can ask, "executives want a threaded application. How can we achieve that, then?" Then the engineers can discuss possible solutions and alternatives. Maybe what they want is concurrency, not necessarily threads. Threads is a way of gaining concurrency. If the goal is concurrency perhaps using a job framework like sidekiq is adequate. Or maybe they can try to use the new concurrency features of a future Ruby version. &lt;/p&gt;
&lt;p&gt;In both scenarios there is a concurrency implementation. One of them was better planned out, and the team members felt respect and appreciated. The other one was ad-hoc, and people are resentful for being ignored and manipulated. One sets up the team for future success. The other one can lead to a fragile product. &lt;/p&gt;
&lt;p&gt;We all work in some sort of team. In which one would you like to be a worker in? Create that team then. &lt;/p&gt;</content><category term="article"></category><category term="software engineering"></category></entry><entry><title>How to Design a Function</title><link href="https://oskipa.github.io/how-to-define-a-function.html" rel="alternate"></link><published>2020-05-05T00:00:00-04:00</published><updated>2020-05-05T00:00:00-04:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-05-05:/how-to-define-a-function.html</id><summary type="html">&lt;p&gt;This is a small template that teaches you how to write a function. This template distills a number of great practices into a brief checklist. This short checklist, which is the core teaching of &lt;a href="https://htdp.org/"&gt;How To Design Programs&lt;/a&gt; book, concentrates writing code, documentation, tests, and thinking about your function's input …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is a small template that teaches you how to write a function. This template distills a number of great practices into a brief checklist. This short checklist, which is the core teaching of &lt;a href="https://htdp.org/"&gt;How To Design Programs&lt;/a&gt; book, concentrates writing code, documentation, tests, and thinking about your function's input range in one small checklist. &lt;/p&gt;
&lt;p&gt;The book uses &lt;a href="https://racket-lang.org/"&gt;Racket&lt;/a&gt; as a teaching language. I am going to give an example using Ruby.&lt;/p&gt;
&lt;p&gt;The checklist&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Write the name of the function&lt;/li&gt;
&lt;li&gt;Write a one-sentence comment describing what the function does&lt;/li&gt;
&lt;li&gt;Write the type signature&lt;/li&gt;
&lt;li&gt;Write an example of use in the comments&lt;/li&gt;
&lt;li&gt;Write tests
    a. It proves that it works
    b. It explores the boundary cases, i.e. range, incorrect types, empty lists, etc.&lt;/li&gt;
&lt;li&gt;Write the code&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now let's walk through a business software example. Let's say you want to insert a new blog record from an http request.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Write the name&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We write the function with its name. Nothing more.  Notice I am not writing the body or the parameters. Only write the name so that it is syntactically correct in the language that you are working on. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;def create_post()&lt;/span&gt;
&lt;span class="err"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Write a one-sentence comment describing the function&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This comment documents what our &lt;em&gt;intent&lt;/em&gt; for the function is. When designing a function, it helps us focus on what we are trying to write. If you can't express it in words, you can't express it in code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;# creates new post&lt;/span&gt;
&lt;span class="err"&gt;def create_post()&lt;/span&gt;
&lt;span class="err"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Write the type signature &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Even if you work with a dynamic language you are working with types. The point of this step is to explicitly think about what is your input and what will be your output. Statically typed languages will enforce your type signature for you. If you are using a dynamic language, you need this information to know what is supposed to be happening.&lt;/p&gt;
&lt;p&gt;The book uses the following type format. You make a list of each parameter followed by an arrow (-&amp;gt;), ending with the return type. This will be familiar to people who have studied Haskell or OCaml. If the return is void, you can say "void" or "unit".&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;# creates new post&lt;/span&gt;
&lt;span class="err"&gt;# Hash -&amp;gt; Unit  &lt;/span&gt;
&lt;span class="err"&gt;def create_post()&lt;/span&gt;
&lt;span class="err"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is an example using more idiomatic Ruby.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;# creates new post&lt;/span&gt;
&lt;span class="err"&gt;# @param params, Hash, the http parameters hash &lt;/span&gt;
&lt;span class="err"&gt;# @return void &lt;/span&gt;
&lt;span class="err"&gt;def create_post(params)&lt;/span&gt;
&lt;span class="err"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Write an example &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Writing an example of how to use your function helps you further design it. It is also one of the most helpful documentatation you can add. Most people will often google for examples. Include them.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;# creates new post&lt;/span&gt;
&lt;span class="err"&gt;# @param blog_parameters, Hash, the http parameters hash &lt;/span&gt;
&lt;span class="err"&gt;# @return void &lt;/span&gt;
&lt;span class="err"&gt;# Example: create_post(params[:blog])&lt;/span&gt;
&lt;span class="err"&gt;def create_post(blog_params)&lt;/span&gt;
&lt;span class="err"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice how I changed the name of the parameter. I did this so that the example would be less confusing since I wanted to pass 'params[:blog]'. Thanks to writing the example, now I have a more explicit name for my function signature.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Write tests&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is a two part step. We are asked to write tests for the correct output and for input ranges. So the happy path and the boundary checks. &lt;/p&gt;
&lt;p&gt;Let's start with basic correctness when everything is right, the happy path.
    # creates new post
    # @param blog_parameters, Hash, the http parameters hash 
    # @return void 
    # Example: create_post(params[:blog])
    def create_post(blog_parameters)
    end&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;testing&lt;/span&gt; &lt;span class="n"&gt;correct&lt;/span&gt; &lt;span class="n"&gt;behavior&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="n"&gt;happy&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;ruby&lt;/span&gt; &lt;span class="n"&gt;pseudo&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;
&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;test_creation&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;
  &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;hello world!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Joe Smith&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;}&lt;/span&gt;

  &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;exercise&lt;/span&gt;
  &lt;span class="n"&gt;create_post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;verification&lt;/span&gt;
  &lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ORM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
  &lt;span class="n"&gt;assert&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nil&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; 
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This made us discover that we we have three required parameters. Now we can change our function again with this new information.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;# creates new post&lt;/span&gt;
&lt;span class="err"&gt;# @param title, String, title of the blog post &lt;/span&gt;
&lt;span class="err"&gt;# @param body, String, body of the blog post &lt;/span&gt;
&lt;span class="err"&gt;# @param author, String, body of the blog post &lt;/span&gt;
&lt;span class="err"&gt;# @return void &lt;/span&gt;
&lt;span class="err"&gt;# Example: create_post(title, body, author)&lt;/span&gt;
&lt;span class="err"&gt;def create_post(title, body, author)&lt;/span&gt;
&lt;span class="err"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we can think about input violation and ranges. How short can a title be? And how short can a body be? What should happen ehn we send a null value for author? What if the inputs are too big? Is it okay to have no author?&lt;/p&gt;
&lt;p&gt;Thinking in term of ranges helps us identify the right number of tests. This is a superior way thinking about it than old advice I was told for TDD where you kept coming up with tests until you couldn't think of any more.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Write the body of the function&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now we are ready to write the body of the function. The process has made it clear what we need to do. Now we can execute.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;# creates new post&lt;/span&gt;
&lt;span class="err"&gt;# @param title, String, title of the blog post &lt;/span&gt;
&lt;span class="err"&gt;# @param body, String, body of the blog post &lt;/span&gt;
&lt;span class="err"&gt;# @param author, String, body of the blog post &lt;/span&gt;
&lt;span class="err"&gt;# @return void &lt;/span&gt;
&lt;span class="err"&gt;# Example: create_post(title, body, author)&lt;/span&gt;
&lt;span class="err"&gt;def create_post(title, body, author)&lt;/span&gt;
&lt;span class="err"&gt;  blog = Blog.new(title, body, author) &lt;/span&gt;
&lt;span class="err"&gt;  ORM.save(blog)&lt;/span&gt;
&lt;span class="err"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the book they have created a whole library of templates for the find of work it is needed to do. Some functions require looping, so they have template looping code. If you have time, explore that library. It most likely will speed up coding if you think in those terms.&lt;/p&gt;</content><category term="article"></category></entry></feed>