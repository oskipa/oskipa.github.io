<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Dada Structures and Algorithms</title><link href="https://oskipa.github.io/" rel="alternate"></link><link href="https://oskipa.github.io/feeds/all.atom.xml" rel="self"></link><id>https://oskipa.github.io/</id><updated>2022-03-03T00:00:00-05:00</updated><entry><title>Your team's programming dialect</title><link href="https://oskipa.github.io/team-programming-dialect.html" rel="alternate"></link><published>2022-03-03T00:00:00-05:00</published><updated>2022-03-03T00:00:00-05:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2022-03-03:/team-programming-dialect.html</id><summary type="html">&lt;p&gt;We in the software developer world believe that a programming language, let's say, Python, is a single language, which will look the same everywhere. Python in particular encourages this idea with their, "there is only one way to do it" philosophy. Yet as people hop from company to company, from …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We in the software developer world believe that a programming language, let's say, Python, is a single language, which will look the same everywhere. Python in particular encourages this idea with their, "there is only one way to do it" philosophy. Yet as people hop from company to company, from team to team, from repo to repo, we see differences on how the language is used.&lt;/p&gt;
&lt;p&gt;People react differently when they find differences. One common one is to say that some people are using Python incorrectly. You hear expressions like "it is not pythonic", "your Java is showing", "these are not best practices". If any analysis is offered, the argument usually boils down to, "you are doing it wrong; I am doing it right." This can lead to hurt feelings or even fights, depending on the personalities involved.&lt;/p&gt;
&lt;p&gt;To me, this is another place where technology discourse hides social dynamics. Having a better perception of reality helps to better discuss what is going on and how to address things. &lt;/p&gt;
&lt;p&gt;In this case, we should think of Python as a natural language, and each company or team having its own language dialect. Dialects are naturally occurring in languages used by groups of people. Developer teams are like villeges. So it will naturally occur that dialects will develop.&lt;/p&gt;
&lt;p&gt;Natural languages, like English or Spanish, are held together by common understanding, a common core of grammar, vocabulary, spelling, and idioms. Yet what people actually speak is a dialect. People actually speak many dialects, depending on the group of people that they are surrounded. We usually speak a family dialect, called an idialect, where within your family you call dinner, "chum chum time." In your town your may speak Southern English. At work you will speak communicator's English. When you go to a professional conference, you speek academic and business dialect.&lt;/p&gt;
&lt;p&gt;There isn't a correct English; as long as you communicate with others, every dialect or idialect is valid. What matters is communications. Can you communicate with each other? Then it is successful.&lt;/p&gt;
&lt;p&gt;Our common notion that there is a correct English and lower types of English is a matter of social behavior. In particular, of power in hiearical societies. The dialect of the rulers becomes "the correct" dialect.&lt;/p&gt;
&lt;p&gt;That is what the diversity of Pythons that you see in the world, different dialects. Python is like English. Just like English, I, as an American, can understand someone from Australia. Yet there will be some sounds and idioms that are different. That is okay: if you really want to understand your Australian friend, you will ask questions on expressions or word you don't understand. they will do the same. Your mutual understanding will grow.&lt;/p&gt;
&lt;p&gt;If I move to Australia, as an American, I can insist in writing in my teenage dialect. It is English. I may even think that an idiom, like "its so fetch", is a good one. But they won't understand it. I may say that when an Australian says "Have a Captain Cook", that this is wrong. It makes no sense. &lt;/p&gt;
&lt;p&gt;What I propose is to approach team programming dialects the same way we approach natural languages: we adapt to make sure that we can communicate well within the group.&lt;/p&gt;
&lt;p&gt;When you join a new team who heavily uses decorators, they are not doing it wrong, this is the team's dialect. Learn the idiom to adapt.&lt;/p&gt;
&lt;p&gt;Let's say that you want to make "fetch" a thing. You introduce it slowly. You explain what it means. If people find it useful, they will start using it.&lt;/p&gt;
&lt;p&gt;In Python fetch can be using list comprehensions. It doesn't matter how cool they are, or how it is so close to a mathematical way to define a set. If no one can understand your code to fix it, it is like saying "this is butter to butterflies."&lt;/p&gt;
&lt;p&gt;You want to preserve your team's dialect because this is how the team has evolved to communicate with each other. In business terms, thousands of worker time have been spent to reach this point. &lt;/p&gt;
&lt;p&gt;We should be more like linguists in that grammars, code standards, describe the practices and are updated to describe new practices.&lt;/p&gt;
&lt;p&gt;And we should let languages evolve. Back to list comprehensions: maybe it didn't take off immediately, but as people tried it out, they understood it, and liked it. So now it is part of the dialect. &lt;/p&gt;</content><category term="log"></category><category term="software-engineering"></category><category term="software-culture"></category></entry><entry><title>Your Team is your Village</title><link href="https://oskipa.github.io/team-language-dialects.html" rel="alternate"></link><published>2022-03-02T00:00:00-05:00</published><updated>2022-03-02T00:00:00-05:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2022-03-02:/team-language-dialects.html</id><summary type="html">&lt;p&gt;Software has a tech bias. Our culture emphasizes technology while ignoring social dynamics. We choose to lose ourselves in technological details. This gives us the option to ignore the social dynamics. Some of us do it more than others. Our current culture pushes us in that direction.&lt;/p&gt;
&lt;p&gt;This bias creates …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Software has a tech bias. Our culture emphasizes technology while ignoring social dynamics. We choose to lose ourselves in technological details. This gives us the option to ignore the social dynamics. Some of us do it more than others. Our current culture pushes us in that direction.&lt;/p&gt;
&lt;p&gt;This bias creates a problem for developer teams. It distorts our perceptions of reality. Because of this distortion, teams will often talk about cultural issues in technical language. Ironically, it often leads to making the wrong technical decisions, because social decisions are cloaked as technical discussions.&lt;/p&gt;
&lt;p&gt;Let me illustrate with a common example. A new CTO joins a company. The company is currently using Ruby on Rails to develop the main product. The CTO believes that Java is a superior technology. He can point out at benchmark tests matching Ruby vs Java, showing that Java is faster. He can point out that Java has true threads, unlike Ruby, who has a workaround to simulates threads. He also says that it is easier to hire Java developers than Ruby developers.&lt;/p&gt;
&lt;p&gt;Within the context of this discussion, Java is the superior technology. It follows that transitioning to Java is the best decision.&lt;/p&gt;
&lt;p&gt;I would wager to say that, in most cases, this is a bad technology and business decision. A top-down change of languages implies a rewrite. Rewrites are notorious for being expensive, take longer than expensive, and for failing. Your team goes from having 100 years of experience as Ruby developers to go down to 0 years of experience. Everyone has to be trained into the new language, which requires training expenses, either explicitly by sending people to seminars and courses, or implicitly, via slower development cycles.&lt;/p&gt;
&lt;p&gt;The team also loses its programming language dialect. A dialect is a social variation of a language. Natural languages, like English, Spanish, Korean, have regional dialects. As anyone who has studied Spanish knows, the accent, the grammar, and the vocabulary used in Spain, is different from the one spoken in Mexico or Bolivia. Most language learners are aware of the existence of dialects.&lt;/p&gt;
&lt;p&gt;Computer languages also have dialects, yet we don't fully acknowledge them. We are aware of them, yet the technical bias tends to push our discussions of dialects as style or correctness discussions. Another way to talk about it is when we say that we need some time to ramp up on the codebase, even when we already know the language.&lt;/p&gt;
&lt;p&gt;Dialects are a social phenomenon. We need to discuss my team's python dialect the same way we talk about Canadian English versus American English.&lt;/p&gt;
&lt;p&gt;Dialects allow teams to be highly productive. Everyone is actually writing the same language.&lt;/p&gt;
&lt;p&gt;There is no such thing as readable code. There is only readable code in the context of a specific team. What is readable an understandable in one team can be this weird, unintelligable mess for someone else.&lt;/p&gt;
&lt;p&gt;Culture matters as well. &lt;/p&gt;
&lt;p&gt;This also shows what the problem of "best practices" entails. It needs the social context for us to decide whether the practice makes sense in this team or not.&lt;/p&gt;
&lt;p&gt;Some of you would say that switching the company language hides some other motives. Maybe the CTO's real goal is for all of the current team to leave, so that he can hand-pick a new team.  &lt;/p&gt;</content><category term="article"></category><category term="software-engineering"></category><category term="cluture"></category></entry><entry><title>Personal Software</title><link href="https://oskipa.github.io/personal-software.html" rel="alternate"></link><published>2022-02-12T00:00:00-05:00</published><updated>2022-02-12T00:00:00-05:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2022-02-12:/personal-software.html</id><summary type="html">&lt;p&gt;I have been writing personal software recently, &lt;a href="https://small-tech.org/about/#easy-to-use"&gt;small tech&lt;/a&gt;. Software that solves my problems in ways that adaps to how I think and work. &lt;/p&gt;
&lt;p&gt;It is unpretentious software. It doesn't want to become a framework. Often, it doesn't want to become a library either. It most definitely won't become a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have been writing personal software recently, &lt;a href="https://small-tech.org/about/#easy-to-use"&gt;small tech&lt;/a&gt;. Software that solves my problems in ways that adaps to how I think and work. &lt;/p&gt;
&lt;p&gt;It is unpretentious software. It doesn't want to become a framework. Often, it doesn't want to become a library either. It most definitely won't become a start up. It doesn't need to run on kubernetes. It will use least amount of resources it can possibly get away with.&lt;/p&gt;
&lt;p&gt;Personal software is small. It is free to grow however it wants. It doesn't need to follow team conventions. It can try new things. It can change its mind. &lt;/p&gt;
&lt;p&gt;Because it is small, personal software is hackable. You can look at the source, see how it works, and change it to fit your needs. You can keep those changes if you want. You can share it with your friends if they can be helpful.&lt;/p&gt;
&lt;p&gt;Personal software can be quirky. It can have silly names. It can use strange computer languages. It can have a personality.&lt;/p&gt;
&lt;p&gt;Personal software is deeply human. It is literally a hand crafted tool that you use and share with others. It is not meant to be mass produced. Like crafts, it can be sold, but it is usually shared.&lt;/p&gt;
&lt;p&gt;Personal software is usually shared by the creator showing people who to use it. When it has documentation, it is useful because it is a labor of love.&lt;/p&gt;
&lt;p&gt;Personal software has existed for a long time. Unix was personal software. Small shell scripts are personal software. The Access forms that your cousin made for your uncle's shop is personal software. Hand-made personal websites are personal software. The minecraft mod that your buddy shared with your is personal software. The arduino sweater that lights up is personal software.&lt;/p&gt;
&lt;p&gt;When we build tools for ourselves and share it with others, we are encouraging others to make their own tools too. They will want to share too. We are a sharing species.&lt;/p&gt;
&lt;p&gt;What can we use? We can use Python. We can use Ruby. We can use Smalltalk Pharo. If you use it and you share it, people will do it to. As long as it is relatively easy to install and run, and you are willing to teach those who are interested, people will do it.&lt;/p&gt;
&lt;p&gt;After writing this entry, I found that I was most likely inspired by &lt;a href="https://small-tech.org/"&gt;small tech&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://small-tech.org/about/#easy-to-use"&gt;Small Tech&lt;/a&gt;&lt;/p&gt;</content><category term="log"></category><category term="personal software"></category><category term="simple programming"></category><category term="small tech"></category></entry><entry><title>Zettel System with Vim and Rake</title><link href="https://oskipa.github.io/zettel-system-with-vim-and-rake.html" rel="alternate"></link><published>2022-02-12T00:00:00-05:00</published><updated>2022-02-12T00:00:00-05:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2022-02-12:/zettel-system-with-vim-and-rake.html</id><summary type="html">&lt;p&gt;Recently I built a simple &lt;a href="https://zettelkasten.de/posts/overview/"&gt;zettelkasten&lt;/a&gt; system using vim and  Ruby's &lt;code&gt;rake&lt;/code&gt; library. This was an exercise in personal software.&lt;/p&gt;
&lt;p&gt;Zettelkasten is a method for keeping hyperlinked notes. Its goal is to organize ideas and enable connections through the hyperlinks. If you like these kinds of things, I encourage you …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently I built a simple &lt;a href="https://zettelkasten.de/posts/overview/"&gt;zettelkasten&lt;/a&gt; system using vim and  Ruby's &lt;code&gt;rake&lt;/code&gt; library. This was an exercise in personal software.&lt;/p&gt;
&lt;p&gt;Zettelkasten is a method for keeping hyperlinked notes. Its goal is to organize ideas and enable connections through the hyperlinks. If you like these kinds of things, I encourage you to follow read the link above or in the references. You encode the link by create a text timestamp.&lt;/p&gt;
&lt;p&gt;You can easily implement this system by using &lt;a href="https://tiddlywiki.com/"&gt;tiddlywiki&lt;/a&gt; or something similar. I used tiddlywiki for years for my todo lists. It is a great software. Yet over the years I migrated to using mostly vim. I also wanted a doa small software project, so I went ahead and created my own. &lt;/p&gt;
&lt;p&gt;I wanted to try it out using my main writing tool, vim. I did some research to see if I could hyperlink to other files in vim. I can, using &lt;code&gt;c-tags&lt;/code&gt;, a vim feature where you create an index for string you want to hyperlink to. Then you use &lt;code&gt;ctrl-[&lt;/code&gt; when the cursor is on the text. Vim will take you to the file.&lt;/p&gt;
&lt;p&gt;I started doing all of this by hand. It quickly got out of hand. I wanted to automate the creation of the cards and the indexing. I reached out to Ruby's &lt;code&gt;rake&lt;/code&gt; library. There are some other similar libraries floating around. I know &lt;code&gt;rake&lt;/code&gt;, I wanted to focus on getting things done, so I used &lt;code&gt;rake&lt;/code&gt;, rather than learning a new library.&lt;/p&gt;
&lt;p&gt;The Rakefile has a few tasks. I can create new zettel cards, I can create an index file, and create tags. The rakefile assumes that there are some directories. The Rakefile is about 200 lines of code. It is easily hackable. &lt;/p&gt;
&lt;p&gt;It is not a complete solution. But it mine. It adapts closely to how I am currently working. It is successful enough that I have integrated the zettel system into my blog, so that I can easily nagivate between notes and writing tech articles. &lt;/p&gt;
&lt;p&gt;You can &lt;a href="https://github.com/oskipa/zettel/blob/main/Rakefile"&gt;explore the code here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://zettelkasten.de/posts/overview/"&gt;zettelkasten&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://tiddlywiki.com/"&gt;tiddlywiki&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/oskipa/zettel/blob/main/Rakefile"&gt;zettel code&lt;/a&gt;&lt;/p&gt;</content><category term="log"></category><category term="personal software"></category><category term="vim"></category><category term="zettel"></category><category term="rake"></category><category term="ruby"></category><category term="simple programming"></category></entry><entry><title>Tables for Layouts: a Fable</title><link href="https://oskipa.github.io/tables-for-layouts-a-fable.html" rel="alternate"></link><published>2022-02-07T00:00:00-05:00</published><updated>2022-02-07T00:00:00-05:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2022-02-07:/tables-for-layouts-a-fable.html</id><summary type="html">&lt;p&gt;A long time ago many web developers used tables for layout. It was handy. It was an easy to do a layout. It was easy to understand. &lt;/p&gt;
&lt;p&gt;"It is wrong, dead wrong," said the Tech Prophet.&lt;/p&gt;
&lt;p&gt;"Tables are meant for data. Developers are misusing it for layout. It &lt;em&gt;data&lt;/em&gt; markup …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A long time ago many web developers used tables for layout. It was handy. It was an easy to do a layout. It was easy to understand. &lt;/p&gt;
&lt;p&gt;"It is wrong, dead wrong," said the Tech Prophet.&lt;/p&gt;
&lt;p&gt;"Tables are meant for data. Developers are misusing it for layout. It &lt;em&gt;data&lt;/em&gt; markup, not &lt;em&gt;layout&lt;/em&gt;. Use CSS for layout instead."&lt;/p&gt;
&lt;p&gt;The wise priests listened. They looked into the CSS that the Tech Prophet had offered. They pointed out that it was hard to understand and hard to implement. The Tech Prophets cursed them out. They left and secretely kept using tables for layouts.&lt;/p&gt;
&lt;p&gt;Those who remained became disciples of the Tech Prophet. The technically pure learned CSS layout. It was harder than tables, but they didn't care. What took them a few hours now took them some days to get it right. But they were technically pure. Over the years the disciples wrapped their solutions in frameworks. These frameworks used a grid metaphor.&lt;/p&gt;
&lt;p&gt;The technically pured ended up doing layouts on grids. A grid is a table. They are using tables again, although in a more complex way. That was because a grid is the right metaphor.&lt;/p&gt;
&lt;p&gt;The moral is that semantic purity can lead to an equivalent solution that is a lot more complex.&lt;/p&gt;</content><category term="log"></category></entry><entry><title>A Poor Philosopher</title><link href="https://oskipa.github.io/a-poor-philosopher.html" rel="alternate"></link><published>2022-01-30T00:00:00-05:00</published><updated>2022-01-30T00:00:00-05:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2022-01-30:/a-poor-philosopher.html</id><summary type="html">&lt;p&gt;I am a bad philosopher. I admit that I don't have a philosophy degree. I don't write philosophy papers. I don't keep up with philosophical trends. I get paid to write business software.&lt;/p&gt;
&lt;p&gt;Yet it is philosophy's method the one that use the most to understand the world. It is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am a bad philosopher. I admit that I don't have a philosophy degree. I don't write philosophy papers. I don't keep up with philosophical trends. I get paid to write business software.&lt;/p&gt;
&lt;p&gt;Yet it is philosophy's method the one that use the most to understand the world. It is what I do. We are what we do.&lt;/p&gt;
&lt;p&gt;I am somewhat surprised by this discovery. I should be saying "engineer" since that is closer to what I get paid for. Yet I couldn't explain what the engineering method is, beside of having to build software with money, time, and quality constraints. I admire mathematics, but I am a latecomer to the discipline, still struggling with it. I was exposed early on to sociology and anthropological methods. I admired both; I don't practice either.&lt;/p&gt;
&lt;p&gt;Economics is an emotionally hard discipline for me. This is because of its close connection with propaganda, from its beginning to this day. In the twentieth century, it was used by both the USSR and the USA. Among the social sciences, it is one that attempts to apply mathematics the most, trying to gain from mathematics its prestige. It has worked to some extent: there is no Nobel prize for psychology, but there is one for economics.&lt;/p&gt;
&lt;p&gt;For all of its desire to be rigorous, economics feels shaky and wrong to me. I don't objects to its use of mathematics; I don't know enough mathematics to know whether they are used correctly or incorrectly. It is the foundational premises of the discipline and how it is used in politics that I found sloppy. Furthermore, I feel that mathematics are the sheets that conceal the shakiness of its foundation.&lt;/p&gt;
&lt;p&gt;For a discipline that prides itself in rigerousness, it plays fast, loose, and reckless with its basic premises and assumptions. In fairness, it admits that it is grossly simplifying the world. Economics create a simple abstraction that is easy to comprehend. And for all of its thick sketches of reality, it is amazingly useful.&lt;/p&gt;
&lt;p&gt;What bothers me deeply is how from such a self-admiting shaky foundationyou end up with strong predictions. What starts are simple models turn into strong pronoucements on how society should be run. How we can justify complex real estate speculation because we have a model showing that it will be okay. That magically dictatorships will become democratic if we let people become rich without government supervision. If it were mare intellectual exercises, it would be fine. Yet people suffer because of these faulty intellectual exercises.&lt;/p&gt;
&lt;p&gt;This is not an attempt to show the deficiencies of economics. I don't know enough about economics to pursue that project.&lt;/p&gt;
&lt;p&gt;It is sharing this because this is how I realized that I am a bad philosopher. My objections are based on the philosophical method. There is a paper about how mathematics works ridiculously well when it shouldn't. Same with philosophy. For a method that is looser than mathematics, it does surprisingly well.&lt;/p&gt;
&lt;p&gt;What am I calling the philosophical method? When you find out reality by making definitions and following their consequences through deductive logic. Looser than mathematics because we cannot start from absolute certainty. Stronger than social sciences in that attempts to get as close to mathematical-inspired logic as possible. And yet still be something of a literature genre.&lt;/p&gt;
&lt;p&gt;I never intended to become a philosopher; less so a bad one. I somehow stumbled into it and made a habit from it. I am a bad philosopher because that is what I do. I am bad at it because that is the quality of my philosphizing. I am fine with this limitation, even when I strive to become better.&lt;/p&gt;
&lt;p&gt;I do bad philosophizing. We are what we do.&lt;/p&gt;</content><category term="log"></category><category term="philosophy"></category></entry><entry><title>It doesn't deserve it</title><link href="https://oskipa.github.io/it-doesnt-deserve-it.html" rel="alternate"></link><published>2022-01-13T00:00:00-05:00</published><updated>2022-01-13T00:00:00-05:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2022-01-13:/it-doesnt-deserve-it.html</id><summary type="html">&lt;p&gt;A coworker from sales asks you if you can help her manage her list of potential clients.&lt;/p&gt;
&lt;p&gt;You could start by designing a new kubernetes pod that includes Postgres as the database, Redis for caching, RabbitMQ for the queuing system. One container will run Node.js to serve the React …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A coworker from sales asks you if you can help her manage her list of potential clients.&lt;/p&gt;
&lt;p&gt;You could start by designing a new kubernetes pod that includes Postgres as the database, Redis for caching, RabbitMQ for the queuing system. One container will run Node.js to serve the React user interface. For the backend, you are wondering if you should code it in .net core or use this as an opportunity to write that first Rust application. You will most likely put it in AWS, but you are open to Azure. The mobile app will be developed using Kotlin for Android and Swift for iOS.&lt;/p&gt;
&lt;p&gt;Or you could spend 15 minutes showing her how to use Google contacts.&lt;/p&gt;
&lt;p&gt;The first solution is complex. Complexity is expensive. It will take a long time to build. You must pay for the services. The diverse technologies take time to learn. Complexity is expensive in terms of understanding a system, fixing bugs, and maintaining it.&lt;/p&gt;
&lt;p&gt;The second one takes 15 minutes. &lt;/p&gt;
&lt;p&gt;Now, the issue is not that expensive, complex solutions are bad. The previous solution makes sense in many situations. For example, if it is vital to keep the list and the privacy of its members private. Or if the plan is that a huge organization wants to have a custom, single contact system for all of their sales people. Or if the idea is that the company is planning on building a sales contact app, using their sales people as the active user base.&lt;/p&gt;
&lt;p&gt;We don't know, though. All what we know is that your coworker wants to organize their contacts.&lt;/p&gt;
&lt;p&gt;So far, the task hasn't earned complexity. So the task doesn't deserve it. You shouldn't give complexity to it. &lt;/p&gt;
&lt;p&gt;Until the task deserve it&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use off-the-shelf software&lt;/li&gt;
&lt;li&gt;use a simple script&lt;/li&gt;
&lt;li&gt;Use a text file to store data&lt;/li&gt;
&lt;li&gt;use a simple app &lt;/li&gt;
&lt;li&gt;use known technologies&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, one should be aware when the task has earned its complexity. The company website is moving from 4 pages to becoming an active blog, which is key for getting customers. Then it may be a good idea to get a WordPress account. They want some customized widgets? We can build custom modules. The desired features and workflow for the blog are so unique that it is hard to develop? Maybe now it is a better idea to write their CMS from scratch, custom-made for the business.&lt;/p&gt;
&lt;p&gt;Another thing to keep in mind is that if it is reasonable to add complexity from the beginning because it will be needed, go ahead and do it. We don't need to spend a winter freezing at a house because we needed to freeze during a winter. Put heat from the start. Same with tech. If you gather relational data, use that database from the start. &lt;/p&gt;
&lt;p&gt;For those paying attention, this is a different way to express YAGNI. Perhaps a bit stronger.&lt;/p&gt;</content><category term="article"></category><category term="software"></category></entry><entry><title>Simple Programming</title><link href="https://oskipa.github.io/simple_programming.html" rel="alternate"></link><published>2022-01-08T00:00:00-05:00</published><updated>2022-01-08T00:00:00-05:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2022-01-08:/simple_programming.html</id><summary type="html">&lt;p&gt;I have been interested in Design By Contract. I don't have access to Eiffel. I want to try them out in Ruby. I looked into the frameworks provided by Ruby, but I don't fully understand how it works. I read that they have a lot of limitation. Frameworks are in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have been interested in Design By Contract. I don't have access to Eiffel. I want to try them out in Ruby. I looked into the frameworks provided by Ruby, but I don't fully understand how it works. I read that they have a lot of limitation. Frameworks are in fact little languages that one has to learn on top of the regular language.&lt;/p&gt;
&lt;p&gt;What can we do?&lt;/p&gt;
&lt;p&gt;We can try it using the most minimal implementation of the idea.&lt;/p&gt;
&lt;p&gt;Let's use design by contracts as an example.&lt;/p&gt;
&lt;p&gt;The basic idea is that you check conditions before and after calling a function. This is somehting that we can implement easily. &lt;/p&gt;
&lt;p&gt;Let's start with a simple function that we want to add contracts to. Here is a function that adds two unsignged bytes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;def&lt;/span&gt; &lt;span class="nv"&gt;unsigned_byte_sum&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;, &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
  &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let's add a precondition that the sum should be of integers.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;def&lt;/span&gt; &lt;span class="nv"&gt;unsigned_byte_sum&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;, &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
  &lt;span class="nv"&gt;unless&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;.&lt;span class="nv"&gt;is_a&lt;/span&gt;?&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Integer&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;.&lt;span class="nv"&gt;is_a&lt;/span&gt;?&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Integer&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; 
    &lt;span class="nv"&gt;raise&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Precondition Violation&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now let's add a postcondition. Let's say that the return should be an integer that fits within a C byte range. So we need to take the result, do a modulo operation and get a value that fits.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;  &lt;span class="nv"&gt;def&lt;/span&gt; &lt;span class="nv"&gt;unsigned_byte_sum&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;, &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;unless&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;.&lt;span class="nv"&gt;is_a&lt;/span&gt;?&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Integer&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;.&lt;span class="nv"&gt;is_a&lt;/span&gt;?&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Integer&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
      &lt;span class="nv"&gt;raise&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Precondition Violation&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="nb"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt;

    &lt;span class="nv"&gt;unless&lt;/span&gt; &lt;span class="nb"&gt;result&lt;/span&gt;.&lt;span class="nv"&gt;is_a&lt;/span&gt;?&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Integer&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;result&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;result&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;
      &lt;span class="nv"&gt;raise&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Postcondition Violation&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="nb"&gt;result&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At this point we have done the basics of Design By Contract. Yet looking at it, it is hard to read. We don't have any indicator of what we are doing. Let's abstract the conditional lines.&lt;/p&gt;
&lt;p&gt;def condition(&amp;amp;block)
      raise "Precondition violation" unless block.call
  end&lt;/p&gt;
&lt;p&gt;def unsigned_byte_sum(a, b)
    condition do
      a.is_a?(Integer) &amp;amp;&amp;amp; b.is_a?(Integer)
    end&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;

&lt;span class="nv"&gt;condition&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nb"&gt;result&lt;/span&gt;.&lt;span class="nv"&gt;is_a&lt;/span&gt;?&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Integer&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;result&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;127&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;result&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="nb"&gt;result&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;end&lt;/p&gt;
&lt;p&gt;This is a good step. It is cleaner. I would like to clearly point out when it is a precondition or postcondition. Especially, we want the error message to let us know immediately.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;  &lt;span class="nv"&gt;def&lt;/span&gt; &lt;span class="nv"&gt;pre_condition&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;block&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
      &lt;span class="nv"&gt;condition&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Precondition violation&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;, &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;block&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="nv"&gt;def&lt;/span&gt; &lt;span class="nv"&gt;post_condition&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;block&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
      &lt;span class="nv"&gt;condition&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Postcondition violation&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;, &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;block&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;


  &lt;span class="nv"&gt;def&lt;/span&gt; &lt;span class="nv"&gt;condition&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;raise_message&lt;/span&gt;, &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;block&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
      &lt;span class="nv"&gt;raise&lt;/span&gt; &lt;span class="nv"&gt;raise_message&lt;/span&gt; &lt;span class="nv"&gt;unless&lt;/span&gt; &lt;span class="nv"&gt;block&lt;/span&gt;.&lt;span class="nv"&gt;call&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;



  &lt;span class="nv"&gt;def&lt;/span&gt; &lt;span class="nv"&gt;unsigned_byte_sum&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;, &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;pre_condition&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="nv"&gt;a&lt;/span&gt;.&lt;span class="nv"&gt;is_a&lt;/span&gt;?&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Integer&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;.&lt;span class="nv"&gt;is_a&lt;/span&gt;?&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Integer&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="nb"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;

    &lt;span class="nv"&gt;post_condition&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="nb"&gt;result&lt;/span&gt;.&lt;span class="nv"&gt;is_a&lt;/span&gt;?&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Integer&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;result&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;127&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;result&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="nb"&gt;result&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is a lot better. It is clear that we are writing a contract for this function. There is one last item that bothers me, which is having to repeat &lt;code&gt;result&lt;/code&gt; a second time. We can make it slightly easier with the following modifications.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;  # &lt;span class="nv"&gt;it&lt;/span&gt; &lt;span class="nv"&gt;will&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nb"&gt;result&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;conditions&lt;/span&gt; &lt;span class="nv"&gt;are&lt;/span&gt; &lt;span class="nv"&gt;true&lt;/span&gt;
  &lt;span class="nv"&gt;def&lt;/span&gt; &lt;span class="nv"&gt;post_condition&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;result&lt;/span&gt;, &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;block&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
      &lt;span class="nv"&gt;condition&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Postcondition violation&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;, &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;block&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
      &lt;span class="nb"&gt;result&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="nv"&gt;def&lt;/span&gt; &lt;span class="nv"&gt;unsigned_byte_sum&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;, &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;pre_condition&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="nv"&gt;a&lt;/span&gt;.&lt;span class="nv"&gt;is_a&lt;/span&gt;?&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Integer&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;.&lt;span class="nv"&gt;is_a&lt;/span&gt;?&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Integer&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="nb"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;

    &lt;span class="nv"&gt;post_condition&lt;/span&gt; &lt;span class="nb"&gt;result&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="nb"&gt;result&lt;/span&gt;.&lt;span class="nv"&gt;is_a&lt;/span&gt;?&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Integer&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;result&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;127&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;result&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt; 
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This puts the &lt;code&gt;post_condition&lt;/code&gt; at the end, as the last step of the function. I think it is cleaner. You may disagree and choose to skip it.&lt;/p&gt;
&lt;p&gt;Now we have a design by contract micro library. This is enough to try it out in your projects and see if it makes sense for you. With these few lines of code, we can bring in the value that design by contract has.&lt;/p&gt;
&lt;p&gt;There is no elaborate API to learn either. The conditions are performed in plain Ruby, as long as you make sure the conditional returns a boolean.&lt;/p&gt;
&lt;p&gt;The contract clauses are clearly marked. They are as close to the code as possible. Having the clauses there is marking that this function has enough business value that it is worth to add pre and post conditions.&lt;/p&gt;
&lt;p&gt;The micro library is small, understandable, and hackable. It is not using obscure or hard to understand metaprograming code. Because of this, a developer or a team can easily extend it as adoption increases.&lt;/p&gt;
&lt;p&gt;For example, the micro library lacks an &lt;code&gt;invariant&lt;/code&gt; test for objects. It shouldn't be too hard to add it if it is necessary.&lt;/p&gt;
&lt;p&gt;It also allows to properly assess whether adopting a library makes sense. Now that you have tried Design by Contract for a while, you can correctly determine if adopting a fully fleshed framework is worth your time or not.&lt;/p&gt;
&lt;p&gt;I could wrap this micro library in a gem. I have decided not to. Instead, you can copy and paste the library, and grow it yourself. Besides of this hackability, it also reduces your security exposure. Once you copy in the template micro library, you don't have to worry that someone has added a security vulnerability or malicious code.  &lt;/p&gt;</content><category term="article"></category><category term="simplicity"></category><category term="programming"></category><category term="design by contract"></category><category term="eiffel"></category><category term="ruby"></category></entry><entry><title>The Missing Tech Context</title><link href="https://oskipa.github.io/the-missing-tech-context.html" rel="alternate"></link><published>2021-11-21T00:00:00-05:00</published><updated>2021-11-21T00:00:00-05:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2021-11-21:/the-missing-tech-context.html</id><summary type="html">&lt;p&gt;Recently I ran into a discussion on a Ruby forum about the "right" way to implement a &lt;code&gt;.double&lt;/code&gt; function. One solution used a &lt;code&gt;case&lt;/code&gt; block that checked on the object's type. The other one added &lt;code&gt;.double&lt;/code&gt; methods to the &lt;code&gt;Numeric&lt;/code&gt;, &lt;code&gt;Array&lt;/code&gt;, etc. Which one is better?&lt;/p&gt;
&lt;p&gt;People with Smalltalk experience …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently I ran into a discussion on a Ruby forum about the "right" way to implement a &lt;code&gt;.double&lt;/code&gt; function. One solution used a &lt;code&gt;case&lt;/code&gt; block that checked on the object's type. The other one added &lt;code&gt;.double&lt;/code&gt; methods to the &lt;code&gt;Numeric&lt;/code&gt;, &lt;code&gt;Array&lt;/code&gt;, etc. Which one is better?&lt;/p&gt;
&lt;p&gt;People with Smalltalk experience will say that adding methods is the proper object oriented solution. And they are right. Right, that is, if we are writing in Smalltalk. If we are writing in another OOP language, this solution may be wrong. A grave mistake, even.&lt;/p&gt;
&lt;p&gt;Isn't OOP the same in any language? Our current expectation is that it is. The reality is that isn't. Each language operates with a different context from the others.&lt;/p&gt;
&lt;p&gt;Ruby is heavily inspired by Smalltalk. It is essentially a command-line Smalltalk dialect that lacks the GUI and the tools. Let's examine the different contexts.&lt;/p&gt;
&lt;p&gt;In Smalltalk we have good development tools. Developer education explains how the language works, how message dispatch works, and how each Smalltalk image is a unique system once you finished your project.&lt;/p&gt;
&lt;p&gt;Ruby has a different culture. It has many people who use it to get things done. It is mainly written in text editors. Message dispatch is learned once we are learning about metaprogramming. The language is syntactically more complex. Developers don't expect that base classes will be modified.&lt;/p&gt;
&lt;p&gt;So while the Smalltalk developer can easily find where a method is defined in their sysystem, even expecting changes, the Ruby developer will be surprised. We want to reduce those surprises.&lt;/p&gt;
&lt;p&gt;An interesting consequence is that is changing Object becomes a common practice in Ruby, then this practice, which today may be considered incorrect, will be fine.&lt;/p&gt;</content><category term="article"></category><category term="tech culture"></category><category term="best practices"></category><category term="oop"></category><category term="functional"></category></entry><entry><title>What is good writing?</title><link href="https://oskipa.github.io/what-is-good-writing.html" rel="alternate"></link><published>2020-12-14T00:00:00-05:00</published><updated>2020-12-14T00:00:00-05:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-12-14:/what-is-good-writing.html</id><summary type="html">&lt;p&gt;As I was writing a brief review of Strunk and White's "The Elements of Style", I began articulating what my current ideas on what good writing consists in. I haven't thought about it for about 20 years. I realized that it had change since then. &lt;/p&gt;
&lt;p&gt;Good writing is about empathy …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As I was writing a brief review of Strunk and White's "The Elements of Style", I began articulating what my current ideas on what good writing consists in. I haven't thought about it for about 20 years. I realized that it had change since then. &lt;/p&gt;
&lt;p&gt;Good writing is about empathy. You have a message you want to share with an audience. You imagine how your audience would like to hear it. You imagine yourself as the audience. You adapt your communication style for that audience.&lt;/p&gt;
&lt;p&gt;Audience is the most important consideration when writing. Audience determines the writing style, vocabulary, word usage, and even grammar. We do this out of respect and empathy for the audience. You must change your regular vocabulary, spelling, or grammar so that your audience will listen, you do it, even if it breaks the conventions of common academic English.&lt;/p&gt;
&lt;p&gt;Good writing keeps your audience focused on your message. Anything that distracts the audience from your message is a problem with your writing. &lt;/p&gt;
&lt;p&gt;Genres and conventions help audiences to know what to expect. Priests should talk like priests. Rappers should talk like rappers. Historical fiction shouldn't have laser guns that come out of nowhere. Political commentary shouldn't break into poetry. Convention breaking pulls away from the message.&lt;/p&gt;
&lt;p&gt;Failing to meet the audience expectations is how they get distracted. Common examples of these distractions are misspellings or grammar mistakes. Word usage can be distracting for some, when used in the wrong context. Breaking a genre convention, if not done correctly or deliberately, will be confusing and distracting. Once distracted it is hard for the audience to focus again on the message. Be empathetic: the audience is already giving their time to listen to what you have to say. Don't distract them. &lt;/p&gt;
&lt;p&gt;You want to develop the skills to write in common English so that people can focus on your message. Many will get distracted if they run into "incorrect English." People who disagree with your message will point out mistakes to distract others. These distractions often become attacks on your intelligence, your education, and your social class. Be empathetic with the rest of the audience and with yourself. Avoid this scenario in the first place. Run the spell and grammar check to avoid the biggest mistakes. Put down your draft and review it the next day. &lt;/p&gt;
&lt;p&gt;Logical organization parallel sentences, and unambigous sentences help people understand you.&lt;/p&gt;
&lt;p&gt;Good writing is about empathy. It is having empathy towards your audience and yourself. Although the last century has focused so much about how writing is the ultimately individual act, its ultimate purpose is to share with others. It is through sharing our opinions how we help to shape others; and through others sharing their opinions how they help to shape us. Writing is the ultimate communal act.&lt;/p&gt;
&lt;p&gt;May your good writing help create a better world.&lt;/p&gt;</content><category term="log"></category><category term="writing"></category></entry><entry><title>Thoughts on Python's iterators</title><link href="https://oskipa.github.io/thoughts-on-pythons-iterators.html" rel="alternate"></link><published>2020-08-07T00:00:00-04:00</published><updated>2020-08-07T00:00:00-04:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-08-07:/thoughts-on-pythons-iterators.html</id><summary type="html">&lt;p&gt;I just read &lt;a href="https://dbader.org/blog/python-iterators"&gt;Dan Bader's blog on iterators&lt;/a&gt; [1]. Iterators were this fuzzy concept that sort of made sense, yet never did. I understood that they were there and how to use them. I read the blog, I try the example, and it clicks.&lt;/p&gt;
&lt;p&gt;The summary is that an iterator …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I just read &lt;a href="https://dbader.org/blog/python-iterators"&gt;Dan Bader's blog on iterators&lt;/a&gt; [1]. Iterators were this fuzzy concept that sort of made sense, yet never did. I understood that they were there and how to use them. I read the blog, I try the example, and it clicks.&lt;/p&gt;
&lt;p&gt;The summary is that an iterator is an object that will give you one item from a collection at a time. Once it gets to the end, it signals that there are no more items. In Python it does this via a StopIteration exception. The "for x  in" expression seems to know how to handle these iterators.&lt;/p&gt;
&lt;p&gt;Once again, Python makes the complex easy to understand. I recall taking a C++ class. I got an A in the course. I still didn't feel confident with OOP. Then I spend some time writing a chip simulator using Python. And OOP clicked. It made sense.&lt;/p&gt;
&lt;p&gt;Python sits in a weird place. It is both an academic and an industry language. It could be that this duality allows it to a balance between making things terse enough so you can get the intention quickly, yet not too terse that you can't understand. It worked like that 20 years ago. It still works today.&lt;/p&gt;
&lt;p&gt;This example has made me think again about the Python Data Model that works along with those funky underscore methods like __iter__. They seem to be the key to this behavior. Also the key to a lot of Python's goodness. The Python Data Model will be the next think I tackle.&lt;/p&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;p&gt;[1] D. Bader. &lt;em&gt;Python Iterators: A Step-By-Step Introduction&lt;/em&gt;. dbader.org.  &lt;a href="https://dbader.org/blog/python-iterators"&gt;https://dbader.org/blog/python-iterators&lt;/a&gt; (accessed August 8, 2020)&lt;/p&gt;</content><category term="log"></category><category term="python"></category></entry><entry><title>Python's args and kwargs</title><link href="https://oskipa.github.io/pythons-args-and-kwargs.html" rel="alternate"></link><published>2020-08-05T00:00:00-04:00</published><updated>2020-08-05T00:00:00-04:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-08-05:/pythons-args-and-kwargs.html</id><summary type="html">&lt;h3&gt;tldr&lt;/h3&gt;
&lt;p&gt;The *args and **kwargs parameter pattern is a way to collect an unknown number of function arguments. The names "args" and "kwargs" is a convention; the important part is the single or double star. A single star will return the arguments as a list. The double start will return …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;tldr&lt;/h3&gt;
&lt;p&gt;The *args and **kwargs parameter pattern is a way to collect an unknown number of function arguments. The names "args" and "kwargs" is a convention; the important part is the single or double star. A single star will return the arguments as a list. The double start will return the argument as a dictionary.&lt;/p&gt;
&lt;h3&gt;The long story&lt;/h3&gt;
&lt;p&gt;Sometimes you need to give your function a variable number of arguments. You don't know in advance how many you are going to need. Let's say that you want to create a function that gives you the sum of some numbers. You don't know how many number there will be. That is when you use *args &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;  &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;def&lt;/span&gt; &lt;span class="nv"&gt;sum&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nv"&gt;args&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;:
  ...   &lt;span class="nb"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  ...   &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;args&lt;/span&gt;:
  ...    &lt;span class="nb"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt; 
  ...   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;result&lt;/span&gt;
  ...
  &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;sum&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
  &lt;span class="mi"&gt;10&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;sum&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;,&lt;span class="mi"&gt;20&lt;/span&gt;,&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
  &lt;span class="mi"&gt;60&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Wouldn't it be nice if there was something similar for dictionaries? There is! That is what **kwargs is for. Let's write a function that updates a dictionary with new values.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;apple&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;ball&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;cat&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;apple&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;deer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;apple&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ball&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cat&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;deer&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For more details, read the article on &lt;a href="https://book.pythontips.com/en/latest/args_and_kwargs.html"&gt;args and kwargs&lt;/a&gt; [1], which is the basis of this entry.
References:&lt;/p&gt;
&lt;p&gt;[1] M. Y. U. Khalid, &lt;em&gt;Python Tips&lt;/em&gt;, &lt;a href="https://book.pythontips.com/en/latest/args_and_kwargs.html"&gt;https://book.pythontips.com/en/latest/args_and_kwargs.html&lt;/a&gt;, (accessed  5 August, 2020).&lt;/p&gt;</content><category term="log"></category><category term="python"></category></entry><entry><title>Python's doctest</title><link href="https://oskipa.github.io/pythons-doctest.html" rel="alternate"></link><published>2020-07-31T00:00:00-04:00</published><updated>2020-07-31T00:00:00-04:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-07-31:/pythons-doctest.html</id><summary type="html">&lt;h3&gt;tldr&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3/library/doctest.html"&gt;doctest&lt;/a&gt; [1]  is a library that allows you to write python examples in comments or text documents. This is handy because you can write examples, test them, and have the peace of mind that they work. &lt;/p&gt;
&lt;p&gt;Here are some examples example&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;print&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Hello World!&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;Hello&lt;/span&gt; &lt;span class="nv"&gt;World&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;


    &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;def&lt;/span&gt; &lt;span class="nv"&gt;one_plus …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h3&gt;tldr&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3/library/doctest.html"&gt;doctest&lt;/a&gt; [1]  is a library that allows you to write python examples in comments or text documents. This is handy because you can write examples, test them, and have the peace of mind that they work. &lt;/p&gt;
&lt;p&gt;Here are some examples example&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;print&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Hello World!&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;Hello&lt;/span&gt; &lt;span class="nv"&gt;World&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;


    &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;def&lt;/span&gt; &lt;span class="nv"&gt;one_plus_one&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;:
    ...   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    ...
    &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;one_plus_one&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;
    &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see, the key is to use the three arrows, &amp;gt;&amp;gt;&amp;gt;, to write the python that you would execute in the console. The result is written lined up after the &amp;gt;&amp;gt;&amp;gt; prompt. If you have a multi-line code sample, like when you are writing a function, you must enter the three dots, ... , and then line up the code as you would when writing python.&lt;/p&gt;
&lt;p&gt;To test your code, you need to have a script that imports doctest. I looked it up on the internet. The solution I found was&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;EOF&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;doctest&lt;/span&gt;
    &lt;span class="n"&gt;doctest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;testfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pythons_doctest.md&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is enough to get you going. Of course there is a lot more to it. Please consult [1] for more information.&lt;/p&gt;
&lt;h3&gt;The long story&lt;/h3&gt;
&lt;p&gt;One of the most awkward bits when writing about programming is writing examples in your articles and having to copy-and-past them into a script, run them, and then having to fix your article. It is not difficult. It is cumbersome. You leave a text editor to go into the console and you must add libraries and whatever you need to prepare to run the examples.&lt;/p&gt;
&lt;p&gt;doctest makes it easier to write your examples in the docs. Or you could write the examples on the interactive console and copy-and-paste the expressions and results into the document you are writing. I first learned about these libraries from Elixir, which encourages writing documentation with examples that can be tested with their document testing library. As I started writing these small entries on Python, I decided that it would be handy to have examples that can be tested before I publish them.&lt;/p&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;p&gt;[1] &lt;em&gt;doctest -- Test interactive Python examples&lt;/em&gt; docs.python.org &lt;a href="https://docs.python.org/3/library/doctest.html"&gt;https://docs.python.org/3/library/doctest.html&lt;/a&gt; (accessed, July 31, 2020)&lt;/p&gt;</content><category term="log"></category><category term="python"></category></entry><entry><title>Python's yield</title><link href="https://oskipa.github.io/pythons-yield.html" rel="alternate"></link><published>2020-07-30T00:00:00-04:00</published><updated>2020-07-30T00:00:00-04:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-07-30:/pythons-yield.html</id><summary type="html">&lt;h2&gt;The short answer&lt;/h2&gt;
&lt;p&gt;Python's 'yield' is used instead of 'result' when you are creating results via a generator function. Think of generators as some sort of a lazy, stateful function that returns one item at a time. Why would we want that? We would want this when consuming a huge …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;The short answer&lt;/h2&gt;
&lt;p&gt;Python's 'yield' is used instead of 'result' when you are creating results via a generator function. Think of generators as some sort of a lazy, stateful function that returns one item at a time. Why would we want that? We would want this when consuming a huge amount of data that can't be loaded all at once into memory. Think of a giant csv file. &lt;/p&gt;
&lt;p&gt;So the point of a generator is to have a function that can give you one item at a time and remember where it was the next time you call it.  &lt;/p&gt;
&lt;p&gt;Here is an example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; # &lt;span class="nv"&gt;we&lt;/span&gt; &lt;span class="nv"&gt;create&lt;/span&gt; &lt;span class="nv"&gt;our&lt;/span&gt; &lt;span class="nv"&gt;generator&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;def&lt;/span&gt; &lt;span class="nv"&gt;up_to_10&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;:
    ...   &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;range&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;:
    ...     &lt;span class="nv"&gt;yield&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;
    ...
    &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; # &lt;span class="nv"&gt;we&lt;/span&gt; &lt;span class="nv"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;it&lt;/span&gt; 
    &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;up_to_10&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;:
    ...   &lt;span class="nv"&gt;print&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
    ...
    &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="mi"&gt;4&lt;/span&gt;
    &lt;span class="mi"&gt;5&lt;/span&gt;
    &lt;span class="mi"&gt;6&lt;/span&gt;
    &lt;span class="mi"&gt;7&lt;/span&gt;
    &lt;span class="mi"&gt;8&lt;/span&gt;
    &lt;span class="mi"&gt;9&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;The longer story&lt;/h2&gt;
&lt;p&gt;My example seems silly since we could achieve the same with a range or with a list. My guess is that generators are useful to implement laziness. You could create a library that queries a  database, but will only make the call it when you actually need it. I can also see how we can use generators to create infinite series.&lt;/p&gt;
&lt;p&gt;'yield' trips me up coming from Ruby. 'yield' does something different in Ruby: it executes a block that has been passed to the method.&lt;/p&gt;
&lt;p&gt;Python's 'yield' seems closer to C#'s yield. Sadly, I never fully understood C#'s yield. From this blog, it looks like it is similar to Pyton's yield. &lt;a href="https://www.kenneth-truyers.net/2016/05/12/yield-return-in-c/"&gt;https://www.kenneth-truyers.net/2016/05/12/yield-return-in-c/&lt;/a&gt;[3]&lt;/p&gt;
&lt;p&gt;You can read more about 'yield' and generators at &lt;a href="https://www.geeksforgeeks.org/use-yield-keyword-instead-return-keyword-python/"&gt;https://www.geeksforgeeks.org/use-yield-keyword-instead-return-keyword-python/&lt;/a&gt;[1] and at its PEP[2]&lt;/p&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;p&gt;[1] A. Agarwal, "When to use yield instead of return in Python?" GeeksForGeeks. &lt;a href="https://www.geeksforgeeks.org/use-yield-keyword-instead-return-keyword-python/"&gt;https://www.geeksforgeeks.org/use-yield-keyword-instead-return-keyword-python/&lt;/a&gt; (accessed July 30, 2020)&lt;/p&gt;
&lt;p&gt;[2] N. Schemenauer, T. Peters, M. Lie Hetland, PEP 255. Python &lt;a href="https://www.python.org/dev/peps/pep-0255/"&gt;https://www.python.org/dev/peps/pep-0255/&lt;/a&gt;(accessed July 30, 2020)&lt;/p&gt;
&lt;p&gt;[3] K. Truyers, &lt;em&gt;Yield return in C#&lt;/em&gt;, kenneth-truyers.net, &lt;a href="https://www.kenneth-truyers.net/2016/05/12/yield-return-in-c/"&gt;https://www.kenneth-truyers.net/2016/05/12/yield-return-in-c/&lt;/a&gt;(accessed July 31, 2020)&lt;/p&gt;</content><category term="log"></category><category term="python"></category></entry><entry><title>Python's with</title><link href="https://oskipa.github.io/pythons-with.html" rel="alternate"></link><published>2020-07-28T00:00:00-04:00</published><updated>2020-07-28T00:00:00-04:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-07-28:/pythons-with.html</id><summary type="html">&lt;h3&gt;The point&lt;/h3&gt;
&lt;p&gt;The "with" statement can be thought as syntactical sugar that replaces a try: except: finally: block with a cleaner syntax.&lt;/p&gt;
&lt;p&gt;Let's focus on the practical application of with. This is an example taken from the PEP. You will see how clear the code is. What you see is …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;The point&lt;/h3&gt;
&lt;p&gt;The "with" statement can be thought as syntactical sugar that replaces a try: except: finally: block with a cleaner syntax.&lt;/p&gt;
&lt;p&gt;Let's focus on the practical application of with. This is an example taken from the PEP. You will see how clear the code is. What you see is your actual code rather than ceremonial templates.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;  &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;opened&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;/etc/passwd&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;f&lt;/span&gt;:
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;line&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;f&lt;/span&gt;:
          &lt;span class="nv"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;line&lt;/span&gt;.&lt;span class="nv"&gt;rstrip&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This would be equivalent to something like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;  &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

  &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/etc/passwd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exc_info&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
  &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see, using "with" is cleaner.&lt;/p&gt;
&lt;p&gt;The one catch is that the object must fit some conditions for it to work with the "with" statement. File objects since Python 2.5 meet them. You can also create objects that can play nicely along "with."&lt;/p&gt;
&lt;h3&gt;The long story&lt;/h3&gt;
&lt;p&gt;A friend told me that I should look into Python's "with" because he said that it trips some people new to the language. I found this document doing an online search &lt;a href="https://www.python.org/dev/peps/pep-0343/"&gt;PEP 343, the with statement&lt;/a&gt;[1]. This document goes into detail on the evolution of the feature and how to use it. If you have time and you are interested, you should read this document.&lt;/p&gt;
&lt;p&gt;As a side note, the Python Enhancement Proposal (PEP), seems to be a great documentation project. I need to think about this and see how workplaces can adopt something like this to document design decisions over time.&lt;/p&gt;
&lt;p&gt;Back to with! In practical terms, "with" is some sort of syntactical sugar that allows you to avoid writing template try: except: finally:  blocks of code. It seems similar to the "using" statement in c#. For us to be able to use a "with" statement, the object needs to support __enter__() and __exit__() methods. The PEP quoted above goes into detail on the requirements for "with" to work.&lt;/p&gt;
&lt;p&gt;If you find the PEP document too overwhelming, as I did, you can also look at the following blog entry by Fredrik Lundh, &lt;a href="https://effbot.org/zone/python-with-statement.htm"&gt;Understanding Python's "with" statement&lt;/a&gt;[2].&lt;/p&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;p&gt;[1]  &lt;a href="https://www.python.org/dev/peps/pep-0343/"&gt;PEP 343, the with statement&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2]  Lundh, Fredrik &lt;a href="https://effbot.org/zone/python-with-statement.htm"&gt;Understanding Python's "with" statement&lt;/a&gt;&lt;/p&gt;</content><category term="log"></category><category term="python"></category></entry><entry><title>On Misspelling</title><link href="https://oskipa.github.io/on-misspelling.html" rel="alternate"></link><published>2020-07-22T00:00:00-04:00</published><updated>2020-07-22T00:00:00-04:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-07-22:/on-misspelling.html</id><summary type="html">&lt;p&gt;English is notoriously hard to spell. It is perhaps one of the biggest hurdles that people learning English have to go through, after learning how to make English sounds. Yet language learners and native speakers can both share in the frustration of its spelling system.&lt;/p&gt;
&lt;p&gt;One would think that the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;English is notoriously hard to spell. It is perhaps one of the biggest hurdles that people learning English have to go through, after learning how to make English sounds. Yet language learners and native speakers can both share in the frustration of its spelling system.&lt;/p&gt;
&lt;p&gt;One would think that the speakers of such a hard language to write would be forgiving when people misspell words. I believe that most people are in day-to-day communication. Yet in situations that matter in people's lives, such as getting a job or doing a sales pitch, having a misspelling can bring judgement, contempt, and rejection to the unfortunate author.&lt;/p&gt;
&lt;p&gt;Like drivers, people think they are better at it than most people. Just like drivers, most people are worse than they think. Personally I have gone through periods where I believe I was an excellent speller. Then I lived through periods where I was an embarrassingly bad speller. I have fluctuated between okay and bad ever since. My lifetime spelling achievement puts me in the mediocre category.&lt;/p&gt;
&lt;p&gt;But why? If I were consistently good, I would attribute it, like most people who are consistently good at spelling, to my superior mind and education. If I were consistently bad, I would attribute that to a poor education, or a learning disability, and secretly I would suffer thinking that I had an inferior mind.&lt;/p&gt;
&lt;p&gt;But my spelling power fluctuates. Spelling inconsistently feeds my vanity and my anxieties. But why? Why? I have come up with the following guesses on why my spelling is mediocre and why it varies.&lt;/p&gt;
&lt;p&gt;My misspellings go up when I am tired. For a number of years, I had bad sleep, so my spelling got worse. My sentences also become strange. In the last few years I have used frequent misspelling as a personal alert for me to go to sleep.&lt;/p&gt;
&lt;p&gt;Another trait that I have is that I seem to be a strong mimic. I will see and copy what I am exposed to. So during my college years I was exposed to a lot of professionally proofread writing, so my spelling was excellent. When I taught middle school for a year and I was exposed to kids still learning how to spell, my spelling became horrible. If I am reading in Spanish, then some Spanish spelling begins to creep in English. If I am learning another language, let's say Latin, then I adopt Latin spelling. It is not like English is the only language affected. I recently noticed that I was writing English-inspired Spanish.&lt;/p&gt;
&lt;p&gt;One solution for this mimicry side effect is that I can stop reading in other languages. Yet I enjoy that so much I am not going to stop. I need to learn how to live with it.&lt;/p&gt;
&lt;p&gt;I also attribute a lot of misspelling to my writing haze, this mental state where I am in a frenzy to write down thoughts. While in this state, I don't see misspellings or grammatical mistakes.&lt;/p&gt;
&lt;p&gt;Yesterday I thought about another possible reason. Maybe it is a bad habit.  Perhaps internet communication, with its short, meaningless exchanges, has encouraged me to be sloppy. I don't care because the bulk of what I write online doesn't matter.&lt;/p&gt;
&lt;p&gt;I am guessing that all the above contribute to poor misspelling. Now I am trying to figure out how to improve my spelling.&lt;/p&gt;
&lt;p&gt;One of the key features of English spelling is that you more or less have to memorize how a word is written. The task ahead of us is one of memorization, so mnemonic tactics should be use. To better learn the spelling of words, we need to guess its origin, since English has different spelling and pronunciation rules for words that come from different languages.&lt;/p&gt;
&lt;p&gt;I am planning on making a list of words I have misspelled so that I can practice those. I will probably use Anki to practice. I have been having a problem with how exactly make cards for it, since I would see the correct answer as the solution. Or I could write the misspelling of a word and then correct it. But then I would be exposing myself to misspellings, and my mimicry trait could learn the misspellings instead. I could also write the pronunciation transcript. Maybe it is best if I make recordings of the word and then I have to write it out.&lt;/p&gt;
&lt;p&gt;There are probably spelling bee quiz programs that I can use to test myself every so often.&lt;/p&gt;
&lt;p&gt;I will try it out and report how my efforts went.&lt;/p&gt;</content><category term="log"></category><category term="writing"></category></entry><entry><title>Slow writing</title><link href="https://oskipa.github.io/slow-writing.html" rel="alternate"></link><published>2020-07-20T00:00:00-04:00</published><updated>2020-07-20T00:00:00-04:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-07-20:/slow-writing.html</id><summary type="html">&lt;p&gt;In the last year I have found it hard to write. It feels that it is hard to express what I am thinking in sentences. When I do write, I notice weaknesses in my logic; in my construction of sentences; in the grammar of the sentences; and a lot of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the last year I have found it hard to write. It feels that it is hard to express what I am thinking in sentences. When I do write, I notice weaknesses in my logic; in my construction of sentences; in the grammar of the sentences; and a lot of misspellings.&lt;/p&gt;
&lt;p&gt;I have thought a lot about this. I mainly attribute it to what I call "the writing haze." When I write, I find myself in this hazy state where I can't see grammatical mistakes or typos. I can start seeing them about 30 to 60 minutes after, once the haze goes away.&lt;/p&gt;
&lt;p&gt;I thought the solution was to revise the next day. Yet while revising I sometimes found the first draft so lacking that I would try writing a new original draft. I ended up again in the writing haze; I, once again, couldn't see errors.&lt;/p&gt;
&lt;p&gt;This morning I was thinking about it. I linked the writing haze with quick, scan reading, which also leads me to have a hazy mind which I can call "the reading haze." That reading haze so uncomfortable that about five years ago I decided to read deliberately slow. It has yielded great results. My reading retention has improved. Reading literature has once again become a vivid experience. Reading a chapter at a time lets me think about what I read, allowing me to chew on ideas.&lt;/p&gt;
&lt;p&gt;I decided to do the writing equivalent of slow reading: slow writing. Maybe if I write slowly I will avoid entering in the writing haze, the same way reading slowly prevents one from entering in the reading haze. Maybe slow writing will encourage deliberate thinking. I am hoping that will be the case.&lt;/p&gt;
&lt;p&gt;I will report how well it worked some time in the future.&lt;/p&gt;</content><category term="log"></category><category term="writing"></category></entry><entry><title>pyenv starter pack</title><link href="https://oskipa.github.io/pyenv-starter-pack.html" rel="alternate"></link><published>2020-07-17T00:00:00-04:00</published><updated>2020-07-17T00:00:00-04:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-07-17:/pyenv-starter-pack.html</id><summary type="html">&lt;p&gt;In my transition from Ruby to Python, I quickly found that there was a familiar experience that made me feel like I never left the Ruby: libraries won't work well in certain language versions.&lt;/p&gt;
&lt;p&gt;The common solution for this problem is to find a version manager. For personal projects I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In my transition from Ruby to Python, I quickly found that there was a familiar experience that made me feel like I never left the Ruby: libraries won't work well in certain language versions.&lt;/p&gt;
&lt;p&gt;The common solution for this problem is to find a version manager. For personal projects I have been using &lt;a href="https://pypi.org/project/pipenv/"&gt;pipenv&lt;/a&gt;, which feels like an enhanced version of bundler that also handles the language version along with virtual environments. Whoa! But they are not using pyenv at work yet.&lt;/p&gt;
&lt;p&gt;This week at work I learned to use pyenv. &lt;a href="https://github.com/pyenv/pyenv"&gt;Pyenv&lt;/a&gt; is a python version manager that knows how to work along with &lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;virtualenv&lt;/a&gt;, python's virtual environment tool. What follows is my cheat sheet on how to use it. It is based on &lt;a href="https://realpython.com/intro-to-pyenv/"&gt;Logan Jones's article&lt;/a&gt; in Real Python [1].&lt;/p&gt;
&lt;p&gt;Check which python versions are available&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pyenv versions
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Install a version of python&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pyenv install 3.6.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;See what versions of python you have installed&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pyenv versions
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Create a virtual environment with a specific python version&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pyenv virtualenv 3.3.1 chunkybacon
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To manually activate and deactivate an environment&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pyenv activate chunkybacon
pyenv deactivate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To see which environments you have&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pyenv virtualenvs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you want to learn how to install pyenv and go deeper on how to use it, please read the article that is the source of this cheat sheet.&lt;/p&gt;
&lt;p&gt;References: 
1. &lt;a href="https://realpython.com/intro-to-pyenv/"&gt;Managing Multiple Python Versions With pyenv&lt;/a&gt; By Logan Jones&lt;/p&gt;</content><category term="log"></category><category term="python"></category></entry><entry><title>Power makes you stupid</title><link href="https://oskipa.github.io/power-makes-you-stupid.html" rel="alternate"></link><published>2020-06-06T00:00:00-04:00</published><updated>2020-06-06T00:00:00-04:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-06-06:/power-makes-you-stupid.html</id><summary type="html">&lt;p&gt;We all have heard how power corrupts and absolute power corrupts absolutely. Probably more worrisome is that power stupefies and absolute power stupefies absolutely.&lt;/p&gt;
&lt;p&gt;Although we have been taught that intelligence is an individual trait, it is to a large extend a communal one. Humans are social animals. What we …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We all have heard how power corrupts and absolute power corrupts absolutely. Probably more worrisome is that power stupefies and absolute power stupefies absolutely.&lt;/p&gt;
&lt;p&gt;Although we have been taught that intelligence is an individual trait, it is to a large extend a communal one. Humans are social animals. What we know, what we decide to spend our time on, and what ideas we have are shaped by the people we socialize.&lt;/p&gt;
&lt;p&gt;Yes, each person has a raw intelligence. But how effective it is depends on who their circle of peers are. I like to think about it  this way: you might have bought a Ferrari that can go 210mph, but if you only drive around city streets, your effective max speed is 30mph.&lt;/p&gt;
&lt;p&gt;Your effective intelligence is bound by who you socialize with and people feeling free to tell you that you are wrong. Assuming that you are surrounded by smart, intelligent people, let's explore how power can reduce your effective intelligence.&lt;/p&gt;
&lt;p&gt;There are many facets to power, but one of them is the ability to harm people. If you are a supervisor, a manager, or an executive, you have the ability to harm people by firing them. You may never think in those terms, or even consider firing people for disagreeing with you, but the people with less power will interact with you aware of this possibility.&lt;/p&gt;
&lt;p&gt;If you can't handle bad news, different opinions, or being told that you are wrong, your subordinates quickly will pick this up and adapt to it. If you crave attention and flattery, your subordinates will grant it to you.&lt;/p&gt;
&lt;p&gt;Quickly the checks-and-balances of our human group disappears. Our human brains are weak, so we start to believe that we are smarter than we are. We are more likable than we are. That we are more competent that we are.&lt;/p&gt;
&lt;p&gt;All of the above is well know. What does it have to do with intelligence? If you are wrong and are not corrected by others, you will stay in the wrong. You will hold onto incorrect ideas. You will stick to bad decisions. You are that Ferrari driving on a 10mph road. &lt;/p&gt;
&lt;p&gt;So what to do? You need to build trust with your people that you can handle bad news and criticism. This is not easy, yet it is necessary.&lt;/p&gt;
&lt;p&gt;Start by stating that you welcome comments on how to improve things. Then when those comments come in, you must stay calm and thank people for the feedback. Then you  must follow through. This is tricky because you won't agree on proposed changes all the time. That is fine. You still should listen and implement changes frequently enough so that people trust that you are listening.&lt;/p&gt;
&lt;p&gt;In short, learn to listen. Your intelligence depends on it.&lt;/p&gt;</content><category term="article"></category><category term="management"></category><category term="leadership"></category></entry><entry><title>Frameworks Should Make it Easy</title><link href="https://oskipa.github.io/frameworks-should-make-it-easy.html" rel="alternate"></link><published>2020-06-03T00:00:00-04:00</published><updated>2020-06-03T00:00:00-04:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-06-03:/frameworks-should-make-it-easy.html</id><summary type="html">&lt;p&gt;Frameworks should make your work easier. Yes, there will be moments when you will have to fight with the framework to get something done. These cases should be rare. In general, you should not think about a framework or be happy when using it. &lt;/p&gt;
&lt;p&gt;Ideally a framework lets you get …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Frameworks should make your work easier. Yes, there will be moments when you will have to fight with the framework to get something done. These cases should be rare. In general, you should not think about a framework or be happy when using it. &lt;/p&gt;
&lt;p&gt;Ideally a framework lets you get your work done. It makes it easy to customize some behavior. It gets out of the way in other cases. It becomes invisible when you are working with business logic.&lt;/p&gt;
&lt;p&gt;DotNet's MVC and PHP's CodeIgniter are two frameworks that meet most of these criteria. Elixir's Phoenix seems to fit it too, but I need more experience working with it to make a stronger statement.&lt;/p&gt;
&lt;p&gt;If you find yourself fighting too much with the framework, it may be an indication that you may move onto something else. It may be faster and easier to write something yourself. Toss it.&lt;/p&gt;</content><category term="article"></category><category term="software engineering"></category><category term="programming"></category></entry><entry><title>Why don't we practice self-reflection in Agile?</title><link href="https://oskipa.github.io/agile-self-reflection.html" rel="alternate"></link><published>2020-06-01T00:00:00-04:00</published><updated>2020-06-01T00:00:00-04:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-06-01:/agile-self-reflection.html</id><summary type="html">&lt;p&gt;Self-reflection is my favorite part from agile. Call it a retrospective or a post-mortem; at the end of the day it is self-reflection. This is the self-correcting mechanism. You see what you have done. If it is not working, you do something else. If it perhaps the essence of agile …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Self-reflection is my favorite part from agile. Call it a retrospective or a post-mortem; at the end of the day it is self-reflection. This is the self-correcting mechanism. You see what you have done. If it is not working, you do something else. If it perhaps the essence of agile. You can give up on everything, but if you keep practicing self-reflection and self-correction, you are doing it correctly. &lt;/p&gt;
&lt;p&gt;It is also the least practiced one. If practiced, it is most likely poorly done. Self-reflection is about accepting reality. Accepting reality is hard. You need three elements for self-reflection to work: maturity to accept reality, safety to point it out, and power to improve things. &lt;/p&gt;
&lt;p&gt;If these conditions don't exist, then doing a retrospective becomes an empty ritual. In the best of cases it is a waste of time. In the worst, it can become a bullying session. In both cases it becomes unpleasant, so people will try to avoid doing it.  &lt;/p&gt;
&lt;p&gt;Accepting reality is the biggest challenge. It takes emotional maturity for individuals and organizations, which are made from those individuals. &lt;/p&gt;
&lt;p&gt;Individually we find it painful to accept reality because we are afraid that it will shatter our self image. We may not be as productive as we were. We may have forgotten a lot about working in css. We may be struggling to learn iOS development. It is common that most of us will rather deny these realities because they force us to change the our self narrative. We avoid this pain.&lt;/p&gt;
&lt;p&gt;Acknowledging these short comings can help us overcome them. If we notice we are less productive, we can start looking for the cause. Maybe we are not sleeping enough. Maybe we need to get a book on css. Maybe asking the iOS developer for help can overcome the change. Yet before we can act on the deficiencies, we need to identify and acknowledge them.  &lt;/p&gt;
&lt;p&gt;We find a similar dynamic as a group, in our teams. Even if we have team members that can handle reality, the team as a whole may not be able to do so. This is where safety and power comes into play. Those in power must make it safe to have team members bring up reality and act on suggestions.&lt;/p&gt;
&lt;p&gt;Let's say that a deadline was missed. The team knows it was missed because the schedule was overly optimistic. If members don't feel safe to point it out because they can be punished for doing so, they won't. People will become yes men out of necessity. Leadership will increasingly find themselves in a parallel reality where their beliefs are reality -- until reality reassesses itself, often in painful ways. &lt;/p&gt;
&lt;p&gt;Maybe the team can be mature enough to acknowledge reality, but they lack power to make changes. If a schedule is too optimistic, you need to add more slack to it. But the team manager may not have the power to do that. Or it was identified that the team needs training in a new technology executives decided to adopt. But they won't give them the budget. &lt;/p&gt;
&lt;p&gt;Retrospectives then become a ritual that teaches learned helplessness. People will become jaded. They will resent the ritual because it is meaningless.&lt;/p&gt;
&lt;p&gt;In reality most of us work in places where the conditions are not ideal. What to do? As individuals we can practice self-reflection ourselves, and act within our power. If it is safe, we can model this with coworkers. This is what each of us can do to foster a culture of self-reflection and safety.&lt;/p&gt;
&lt;p&gt;If you are a manager you have greater power to shape culture. There are two things that are important to create this culture. The first one is to honestly model self-reflection. The stress is on the honesty. The second one is to act on suggestions.&lt;/p&gt;
&lt;p&gt;If you were responsible for the optimistic schedule, you can acknowledge that, and adjust it. Say something like, "I forgot to include slack for people getting sick" or "I didn't take into consideration the mandatory corporate retreat". Then you need to follow through fixing the schedule.&lt;/p&gt;
&lt;p&gt;Let's say that in a retrospective workers say slack is too distracting, and they need 4 hours where they can turn it off so they can focus on work. The manager wants to make sure that people can still be reached within reasonable periods of time. The manager says that they can turn off slack for two hours, check messages and answer them then, and then turn it off for another two hours. The team most likely be pleased. It may not be 4 hours solid, but getting two focus segments are better than none.&lt;/p&gt;
&lt;p&gt;We must keep in mind that power is often limited, so we can sometimes only do modest changes. Hopefully those changes can build up over time and we can then reap the benefits of self-reflection.&lt;/p&gt;</content><category term="log"></category><category term="software-engineering"></category></entry><entry><title>Goals over Process</title><link href="https://oskipa.github.io/goals-over-process.html" rel="alternate"></link><published>2020-05-30T00:00:00-04:00</published><updated>2020-05-30T00:00:00-04:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-05-30:/goals-over-process.html</id><summary type="html">&lt;p&gt;Sometimes when we learn a new methodology we become eager to implement it. It is like buying a new board game and being eager to play it with others.  &lt;/p&gt;
&lt;p&gt;In our zeal to implement these methodologies, we may lose track that a methodology is a means to achieve a goal …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Sometimes when we learn a new methodology we become eager to implement it. It is like buying a new board game and being eager to play it with others.  &lt;/p&gt;
&lt;p&gt;In our zeal to implement these methodologies, we may lose track that a methodology is a means to achieve a goal. The discipline is not the goal itself. Yet it is so easy to fall into the trap of making the discipline the goals.&lt;/p&gt;
&lt;p&gt;What is the goal of methodologies like agile or waterfall? It is to give some organization to software development. Ideally to create working habits that give managers the information they need while giving workers predictable working environment. &lt;/p&gt;
&lt;p&gt;Ultimately what managers need is to know what is the state of a project in terms of completion and schedule. This is necessary to make decisions to keep a project on schedule. To a lesser extent they need to know how their workers are performing. This is necessary to identify problems and provide training if possible. &lt;/p&gt;
&lt;p&gt;Workers need a reasonable work process. They need to have the necessary autonomy, training, and tools. They need a safe environment so that they can focus on their work rather than office politics.&lt;/p&gt;
&lt;p&gt;Keeping in mind these goals, we can adapt methodology principles to actual workplaces when we join them. &lt;/p&gt;
&lt;p&gt;If a team shares their daily tasks on a slack channel, that fulfills the information needs for the  manager. There isn't a need to introduce a stand up meeting. You may love the stand up ritual, but if you force on people who don't want to do it, they will resent you for wasting their time. At the end of the day the manager is still getting the information they need.&lt;/p&gt;
&lt;p&gt;Process is a tool. If some behavior exists that already fulfill the goal, then the pragmatic decision is to keep that behavior.&lt;/p&gt;</content><category term="log"></category><category term="process"></category></entry><entry><title>Find and Replace Recursively</title><link href="https://oskipa.github.io/find-and-replace-recursively.html" rel="alternate"></link><published>2020-05-27T00:00:00-04:00</published><updated>2020-05-27T00:00:00-04:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-05-27:/find-and-replace-recursively.html</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;grep -rl &amp;quot;Chunky&amp;quot; . | LC_ALL=C xargs sed -i &amp;quot;.bak&amp;quot;  &amp;quot;s/Chunky/Bacon/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Every so often we need to mass edit some directories. That should be the job of sed. Yet sed doesn't find files, so you need another utility. There you have a choice of tools. For this case …&lt;/p&gt;</summary><content type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;grep -rl &amp;quot;Chunky&amp;quot; . | LC_ALL=C xargs sed -i &amp;quot;.bak&amp;quot;  &amp;quot;s/Chunky/Bacon/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Every so often we need to mass edit some directories. That should be the job of sed. Yet sed doesn't find files, so you need another utility. There you have a choice of tools. For this case I decided to use grep. Although I use ack for searching patterns, I thought that grep would be the right tool here.&lt;/p&gt;
&lt;p&gt;Now the explanation of the example.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Magical bit&lt;/th&gt;
&lt;th&gt;Explanation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;grep&lt;/td&gt;
&lt;td&gt;Our second favorite tool for finding patterns in files. Our favorite is ack, but grep is more appropriate here.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-rl&lt;/td&gt;
&lt;td&gt;Our grep options. r = recursive search. l = output the name of the files&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;"Chunky"&lt;/td&gt;
&lt;td&gt;Our pattern&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;The direction we want to search. In this case, start from the current directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;the pipe&lt;/td&gt;
&lt;td&gt;The magic unix character that lets us pass output into another command&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LC_ALL=C&lt;/td&gt;
&lt;td&gt;The esoteric incantation to have sed behave in MacOS. It has to do with encoding&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;xargs&lt;/td&gt;
&lt;td&gt;Unix utility to transform standard input into command arguments&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sed&lt;/td&gt;
&lt;td&gt;Our batch editor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-i&lt;/td&gt;
&lt;td&gt;The option to edit in place&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;".bak"&lt;/td&gt;
&lt;td&gt;The extension that we want to give to the backup file that sed -i will create&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;"s/Chunky/Bacon/"&lt;/td&gt;
&lt;td&gt;The sed command we want to execute. In this case substitute Chunky with Bacon&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;You can clean up the backup files with &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;grep -rl &amp;quot;Chunky&amp;quot; . | xarg rm -f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="log"></category><category term="shell"></category><category term="unix"></category><category term="linux"></category><category term="macos"></category></entry><entry><title>Listen instead of getting buy in</title><link href="https://oskipa.github.io/listen-instead-of-getting-buy-in.html" rel="alternate"></link><published>2020-05-06T00:00:00-04:00</published><updated>2020-05-06T00:00:00-04:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-05-06:/listen-instead-of-getting-buy-in.html</id><summary type="html">&lt;p&gt;I learned recently that product owners and managers are trained to seek team members to buy-in into new process, goals, or plans. This was an unfortunate word selection. It undermines building trust in a team. It frames the relationship between managers and workers the wrong way.&lt;/p&gt;
&lt;p&gt;"Buy-in" sets a narrative …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I learned recently that product owners and managers are trained to seek team members to buy-in into new process, goals, or plans. This was an unfortunate word selection. It undermines building trust in a team. It frames the relationship between managers and workers the wrong way.&lt;/p&gt;
&lt;p&gt;"Buy-in" sets a narrative where the manager wants something that the workers are resistant to do. The goal of the manager becomes getting that buy-in, that verbal agreement. The manager becomes a high pressure salesman. Workers are reluctant customers. A successful manager, like a high pressure salesman, making that sale no matter what. In high pressure sales, you will ignore objections. All you want is an explicit or implicit yes, even if it is not real. &lt;/p&gt;
&lt;p&gt;A better approach is to listen. Everyone wants to succeed. As a manager you may have a vision to implement, either personal or given by your supervisors. Your workers know the obstacles that are in the way to get that done.&lt;/p&gt;
&lt;p&gt;Let me give you an example. Upper management learned about threaded programming. They want the project to use threaded programming. It should make response time faster. Fair enough. You go to your team and you announce this. The team tells you that it is not a good idea because the legacy project is using Ruby, and Ruby's thread model is not robust.&lt;/p&gt;
&lt;p&gt;If the manager has a buy-in mentality, they will think that the workers are stuck in their ways. That they don't want to adapt to new ideas. The manager's task now is somehow to win them over and agree to do the task that must be done. It sets an adversarial relation with the works. It is easy to ignore what the workers are telling you because you need that win. The manager does some googling and finds that there are threads in Ruby. The devs must be ignorant and are too prideful to accept that. When an unrelated PR comes, he asks for the solution to be using threads. &lt;/p&gt;
&lt;p&gt;Let's switch the frame where the manager listens respectfully. Rather than ignore what the engineers are saying, he listens. There are risks ahead. Now the manager can ask, "executives want a threaded application. How can we achieve that, then?" Then the engineers can discuss possible solutions and alternatives. Maybe what they want is concurrency, not necessarily threads. Threads is a way of gaining concurrency. If the goal is concurrency perhaps using a job framework like sidekiq is adequate. Or maybe they can try to use the new concurrency features of a future Ruby version. &lt;/p&gt;
&lt;p&gt;In both scenarios there is a concurrency implementation. One of them was better planned out, and the team members felt respect and appreciated. The other one was ad hoc, and people are resentful for being ignored and manipulated. One sets up the team for future success. The other one can lead to a fragile product. &lt;/p&gt;
&lt;p&gt;We all work in some sort of team. In which one would you like to be a worker in? Create that team then. &lt;/p&gt;</content><category term="article"></category><category term="software engineering"></category></entry><entry><title>How to Design a Function</title><link href="https://oskipa.github.io/how-to-define-a-function.html" rel="alternate"></link><published>2020-05-05T00:00:00-04:00</published><updated>2020-05-05T00:00:00-04:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-05-05:/how-to-define-a-function.html</id><summary type="html">&lt;p&gt;This is a small template that teaches you how to write a function. This template distills a number of great practices into a brief checklist. This short checklist, which is the core teaching of &lt;a href="https://htdp.org/"&gt;How To Design Programs&lt;/a&gt; book, concentrates writing code, documentation, tests, and thinking about your function's input …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is a small template that teaches you how to write a function. This template distills a number of great practices into a brief checklist. This short checklist, which is the core teaching of &lt;a href="https://htdp.org/"&gt;How To Design Programs&lt;/a&gt; book, concentrates writing code, documentation, tests, and thinking about your function's input range in one small checklist. &lt;/p&gt;
&lt;p&gt;The book uses &lt;a href="https://racket-lang.org/"&gt;Racket&lt;/a&gt; as a teaching language. I am going to give an example using Ruby.&lt;/p&gt;
&lt;p&gt;The checklist&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Write the name of the function&lt;/li&gt;
&lt;li&gt;Write a one-sentence comment describing what the function does&lt;/li&gt;
&lt;li&gt;Write the type signature&lt;/li&gt;
&lt;li&gt;Write an example of use in the comments&lt;/li&gt;
&lt;li&gt;Write tests
    a. It proves that it works
    b. It explores the boundary cases, i.e. range, incorrect types, empty lists, etc.&lt;/li&gt;
&lt;li&gt;Write the code&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now let's walk through a business software example. Let's say you want to insert a new blog record from an http request.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Write the name&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We write the function with its name. Nothing more.  Notice I am not writing the body or the parameters. Only write the name so that it is syntactically correct in the language that you are working on. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;def&lt;/span&gt; &lt;span class="nv"&gt;create_post&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;Write a one-sentence comment describing the function&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This comment documents what our &lt;em&gt;intent&lt;/em&gt; for the function is. When designing a function, it helps us focus on what we are trying to write. If you can't express it in words, you can't express it in code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# &lt;span class="nv"&gt;creates&lt;/span&gt; &lt;span class="nv"&gt;new&lt;/span&gt; &lt;span class="nv"&gt;post&lt;/span&gt;
&lt;span class="nv"&gt;def&lt;/span&gt; &lt;span class="nv"&gt;create_post&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;Write the type signature &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Even if you work with a dynamic language you are working with types. The point of this step is to explicitly think about what is your input and what will be your output. Statically typed languages will enforce your type signature for you. If you are using a dynamic language, you need this information to know what is supposed to be happening.&lt;/p&gt;
&lt;p&gt;The book uses the following type format. You make a list of each parameter followed by an arrow (-&amp;gt;), ending with the return type. This will be familiar to people who have studied Haskell or OCaml. If the return is void, you can say "void" or "unit".&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;# creates new post&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;# Hash -&amp;gt; Unit  &lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;create_post&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kd"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is an example using more idiomatic Ruby.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;creates&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;@param&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Hash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;parameters&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hash&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;@return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;create_post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;Write an example &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Writing an example of how to use your function helps you further design it. It is also one of the most helpful documentation you can add. Most people will often google for examples. Include them.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;creates&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;@param&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;blog_parameters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Hash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;parameters&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hash&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;@return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;create_post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;:blog&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;create_post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blog_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice how I changed the name of the parameter. I did this so that the example would be less confusing since I wanted to pass 'params[:blog]'. Thanks to writing the example, now I have a more explicit name for my function signature.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Write tests&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is a two part step. We are asked to write tests for the correct output and for input ranges. So the happy path and the boundary checks. &lt;/p&gt;
&lt;p&gt;Let's start with basic correctness when everything is right, the happy path.
    # creates new post
    # @param blog_parameters, Hash, the http parameters hash 
    # @return void 
    # Example: create_post(params[:blog])
    def create_post(blog_parameters)
    end&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# &lt;span class="nv"&gt;testing&lt;/span&gt; &lt;span class="nv"&gt;correct&lt;/span&gt; &lt;span class="nv"&gt;behavior&lt;/span&gt; &lt;span class="nv"&gt;or&lt;/span&gt; &lt;span class="nv"&gt;happy&lt;/span&gt; &lt;span class="nv"&gt;path&lt;/span&gt;
# &lt;span class="nv"&gt;The&lt;/span&gt; &lt;span class="nv"&gt;test&lt;/span&gt; &lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;ruby&lt;/span&gt; &lt;span class="nv"&gt;pseudo&lt;/span&gt; &lt;span class="nv"&gt;code&lt;/span&gt;
&lt;span class="nv"&gt;def&lt;/span&gt; &lt;span class="nv"&gt;test_creation&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;
  # &lt;span class="nv"&gt;setup&lt;/span&gt;
  &lt;span class="nb"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; {&lt;span class="nv"&gt;title&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;hello&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;, &lt;span class="nv"&gt;body&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;hello world!&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;, &lt;span class="nv"&gt;author&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Joe Smith&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; }

  # &lt;span class="nv"&gt;exercise&lt;/span&gt;
  &lt;span class="nv"&gt;create_post&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;params&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;

  # &lt;span class="nv"&gt;verification&lt;/span&gt;
  &lt;span class="nv"&gt;record&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;ORM&lt;/span&gt;.&lt;span class="nv"&gt;find_by&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;title&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;hello&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; 
  &lt;span class="nv"&gt;assert&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;record&lt;/span&gt;.&lt;span class="nv"&gt;nil&lt;/span&gt;? 
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This made us discover that we we have three required parameters. Now we can change our function again with this new information.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;creates&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;@param&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;@param&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;@param&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;@return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;create_post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;create_post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we can think about input violation and ranges. How short can a title be? And how short can a body be? What should happen we send a null value for author? What if the inputs are too big? Is it okay to have no author?&lt;/p&gt;
&lt;p&gt;Thinking in term of ranges helps us identify the right number of tests. This is a superior way thinking about it than old advice I was told for TDD where you kept coming up with tests until you couldn't think of any more.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Write the body of the function&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now we are ready to write the body of the function. The process has made it clear what we need to do. Now we can execute.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;creates&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;@param&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;@param&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;@param&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;@return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;create_post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;create_post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Blog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;ORM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the book they have created a whole library of templates for the find of work it is needed to do. Some functions require looping, so they have template looping code. If you have time, explore that library. It most likely will speed up coding if you think in those terms.&lt;/p&gt;</content><category term="article"></category></entry><entry><title>The Five Minutes Problem</title><link href="https://oskipa.github.io/the-five-minutes-problem.html" rel="alternate"></link><published>2020-04-24T00:00:00-04:00</published><updated>2020-04-24T00:00:00-04:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-04-24:/the-five-minutes-problem.html</id><summary type="html">&lt;p&gt;In fields like chess, math, and computer science, you need to do the problems to learn. You cannot learn just by watching a lecture. It is a skill that one must cultivate via doing.&lt;/p&gt;
&lt;p&gt;But the question is, how much should you spend on a problem that you cannot solve …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In fields like chess, math, and computer science, you need to do the problems to learn. You cannot learn just by watching a lecture. It is a skill that one must cultivate via doing.&lt;/p&gt;
&lt;p&gt;But the question is, how much should you spend on a problem that you cannot solve?&lt;/p&gt;
&lt;p&gt;One school of thought is that you keep at that problem until you can solve it by yourself. It seems to make sense. If you put enough effort, you will discover the solution. Or find a novel one. Unfortunately you may not find a solution, so you can stop playing chess or learning math if you strikingly stick to this method.&lt;/p&gt;
&lt;p&gt;A better method is to timebox how much time you spend on solving a puzzle. The rule of thumb is that you should find the basic solution within five minutes. &lt;/p&gt;
&lt;p&gt;For those five minutes, you will attempt to solve the problem all by yourself. You have to give it your all. If you solved it, good! Pat yourself in the back!&lt;/p&gt;
&lt;p&gt;If you don't, you look at the answer. &lt;/p&gt;
&lt;p&gt;If this cheating? No. Problem solving is about pattern recognition. If you couldn't find a solution, you couldn't find a pattern. That means you haven't learned that pattern.&lt;/p&gt;
&lt;p&gt;By spending those earnest five minutes trying to solve the problem, you will understand the problem well. You will understand why your natural solution didn't work. When you look at the solution, it is meaningful. Your emotional reaction to seeing the solution will make it easier for you to remember it, creating that desire pattern for you to recognize the next time you see a similar problem.&lt;/p&gt;
&lt;p&gt;I also learned this tactic by looking at the solution. I found this strategy in a chess book, which in turn adopted it from what seems to be a math teaching tactic in Russia.&lt;/p&gt;</content><category term="log"></category><category term="learning"></category><category term="comp sci"></category><category term="math"></category></entry><entry><title>Looping in Ruby</title><link href="https://oskipa.github.io/looping-in-ruby.html" rel="alternate"></link><published>2020-04-22T00:00:00-04:00</published><updated>2020-04-22T00:00:00-04:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-04-22:/looping-in-ruby.html</id><summary type="html">&lt;p&gt;Looping in Ruby is usually a delight.  &lt;!-- break --&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;animals&lt;/span&gt;.&lt;span class="nv"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nv"&gt;beast&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="nv"&gt;beast&lt;/span&gt;.&lt;span class="nv"&gt;roar&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Sometimes you need the index. So you call in &lt;code&gt;#each_with_index&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;animals&lt;/span&gt;.&lt;span class="nv"&gt;each_with_index&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nv"&gt;beast&lt;/span&gt;, &lt;span class="nv"&gt;index&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="nv"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;#{beast} #{index} says: #{beast.roar} &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you feel functional, then you can use one of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Looping in Ruby is usually a delight.  &lt;!-- break --&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;animals&lt;/span&gt;.&lt;span class="nv"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nv"&gt;beast&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="nv"&gt;beast&lt;/span&gt;.&lt;span class="nv"&gt;roar&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Sometimes you need the index. So you call in &lt;code&gt;#each_with_index&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;animals&lt;/span&gt;.&lt;span class="nv"&gt;each_with_index&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nv"&gt;beast&lt;/span&gt;, &lt;span class="nv"&gt;index&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="nv"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;#{beast} #{index} says: #{beast.roar} &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you feel functional, then you can use one of the Enumerable methods.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;animals&lt;/span&gt;.&lt;span class="nv"&gt;map&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nv"&gt;beast&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="nv"&gt;beast&lt;/span&gt;.&lt;span class="nv"&gt;roar&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For 90% of your looping needs, #each, or an Enumerable, #map, #select, #any?, #all?, etc, will do.&lt;/p&gt;
&lt;p&gt;If you are working with a queue or a stack, you can always use the classic where loop&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;where&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;stack&lt;/span&gt;.&lt;span class="nv"&gt;empty&lt;/span&gt;?
  &lt;span class="nv"&gt;ghost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;stack&lt;/span&gt;.&lt;span class="nv"&gt;pop&lt;/span&gt;
  &lt;span class="nv"&gt;pacman&lt;/span&gt;.&lt;span class="nv"&gt;chomp&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ghost&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Yet every so often you will get to some problem where a classic for loop would be perfect. This is where it becomes awkward. Ruby doesn't have a classic for loop.&lt;/p&gt;
&lt;p&gt;There is a for loop. But it is not C style for loop. Instead it loops over a collection. Usually a list or a range.&lt;/p&gt;
&lt;p&gt;This is how it works. This will go by each element.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;list&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nv"&gt;puts&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In effect, it is a wordy version of #each. Therefore most people use #each.&lt;/p&gt;
&lt;p&gt;But we want a C style for! Because sometimes using indices is the right solution to a problem. Even though we don't have something just like it, we can build something close to it.&lt;/p&gt;
&lt;p&gt;Let's say you want something like this from C#&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WriteLn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can replicate it by doing something like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here we are using a range. So we will cycle through 0 to list.length - 1. We get that -1 automatically by using the ... range operator that says that we don't want to include the last number. If you wanted to include the last number, we would have written (0..list.length), but this would throw and out of range error when it got to the last item.&lt;/p&gt;
&lt;p&gt;But what do you do when you want to go backwards? We can come up with something as well.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;to_a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reverse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here we start with the range. We turn it into an array, and then we call reverse. Wordy? Yes. Does it get the job done? Also yes. &lt;/p&gt;
&lt;p&gt;The good news is that these are rare scenarios.&lt;/p&gt;</content><category term="log"></category><category term="ruby"></category></entry><entry><title>Getting Started With Byebug</title><link href="https://oskipa.github.io/intro-byebug.html" rel="alternate"></link><published>2020-04-21T00:00:00-04:00</published><updated>2020-04-21T00:00:00-04:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-04-21:/intro-byebug.html</id><summary type="html">&lt;p&gt;This is a very quick guide/checklist on how to install and get debugging with Byebug, a Ruby debugger.  &lt;!-- break --&gt;&lt;/p&gt;
&lt;h2&gt;Installing byebug&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gem install byebug
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or add to your Gemfile&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gem byebug
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Setting a breakpoint and starting a session&lt;/h2&gt;
&lt;p&gt;To add the point where byebug will start the session in your …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is a very quick guide/checklist on how to install and get debugging with Byebug, a Ruby debugger.  &lt;!-- break --&gt;&lt;/p&gt;
&lt;h2&gt;Installing byebug&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gem install byebug
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or add to your Gemfile&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gem byebug
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Setting a breakpoint and starting a session&lt;/h2&gt;
&lt;p&gt;To add the point where byebug will start the session in your code, essentially, the breakpoint, you type the method "byebug" in your code. If your code looks like this,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;def&lt;/span&gt; &lt;span class="nv"&gt;my_awesome_function&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;
  &lt;span class="nv"&gt;process&lt;/span&gt;
  &lt;span class="nv"&gt;log&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You would set the breakpoint like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;def&lt;/span&gt; &lt;span class="nv"&gt;my_awesome_function&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;
  &lt;span class="nv"&gt;byebug&lt;/span&gt;
  &lt;span class="nv"&gt;process&lt;/span&gt;
  &lt;span class="nv"&gt;log&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you are running your code directly, the running should stop when your code reaches the line with byebug. If you are using something like foreman, then you have the option to connect to a sockets session on another terminal tab.&lt;/p&gt;
&lt;h2&gt;The debugger screen&lt;/h2&gt;
&lt;p&gt;Once byebug starts its session, you will see the debugger screen. This screen will give you the file name, and then some lines of the code. There will be a arrow showing you the current place where the code execution has stopped.&lt;/p&gt;
&lt;p&gt;To step over the next line of code, enter "next".&lt;/p&gt;
&lt;p&gt;To step into the next line of code, enter "step"&lt;/p&gt;
&lt;p&gt;To step out, enter, "finish". This last one doesn't seem to work as I would want it to, so sometimes I have to enter it several times.&lt;/p&gt;
&lt;p&gt;If by querying values you can't see the code where you are stopped, you can get the listing back by typing "list =".&lt;/p&gt;
&lt;p&gt;To let the program run, type "continue".&lt;/p&gt;
&lt;h2&gt;Navigating the Stack Trace&lt;/h2&gt;
&lt;p&gt;To see the stack trace, type "backtrack". This should give you a pretty output of the stack trace.&lt;/p&gt;
&lt;p&gt;If you want to go back in the stack trace so that you can query the environment at a previous point in the execution, type "up".&lt;/p&gt;
&lt;p&gt;Once you are done doing your exploring, you can come back to later points by typing "down".&lt;/p&gt;
&lt;h2&gt;Querying current values&lt;/h2&gt;
&lt;p&gt;Perhaps one of the most important things you can do in the debugging console is to query the value of different variables.&lt;/p&gt;
&lt;p&gt;You can examine variables by typing their name and hitting enter.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;(byebug) name
&amp;quot;My name&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Trying out solutions&lt;/h2&gt;
&lt;p&gt;If you think you found a way to solve your bug, you can try the solution directly in the console to see if it works out.&lt;/p&gt;
&lt;h2&gt;Learning more&lt;/h2&gt;
&lt;p&gt;The debugger becomes a better tool if your add to it an understanding on Ruby's object model and method dispatch. Having a good command on Ruby's reflection methods also helps.&lt;/p&gt;
&lt;p&gt;For more information on Byebug itself and to explore other command, look at its documentation on github https://github.com/deivid-rodriguez/byebug&lt;/p&gt;</content><category term="log"></category><category term="ruby"></category><category term="byebug"></category></entry><entry><title>Functional Programming in OCaml, 1-2</title><link href="https://oskipa.github.io/functional-programming-in-ocaml-1-2.html" rel="alternate"></link><published>2020-03-14T00:00:00-04:00</published><updated>2020-03-14T00:00:00-04:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-03-14:/functional-programming-in-ocaml-1-2.html</id><summary type="html">&lt;p&gt;&lt;a href="https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/"&gt;Functional Programming in OCaml&lt;/a&gt; is an online book compiled by Michael R. Clarkson. It is used by Cornell University for their functional programming course.&lt;/p&gt;
&lt;p&gt;I enjoyed reading chapter one. They explain the goals and purpose of the class that the book supports. It also has a great section on the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/"&gt;Functional Programming in OCaml&lt;/a&gt; is an online book compiled by Michael R. Clarkson. It is used by Cornell University for their functional programming course.&lt;/p&gt;
&lt;p&gt;I enjoyed reading chapter one. They explain the goals and purpose of the class that the book supports. It also has a great section on the history of the  book and the course. It tells how the class was originally based on &lt;a href="http://sarabander.github.io/sicp/html/index.xhtml#SEC_Contents"&gt;Structure and Interpretation of Computer Programs&lt;/a&gt;, (SICP). From the challenges of teaching SICP, they changed languages, from Scheme to OCaml, and they developed the textbook from their class notes. This is fascinating because it is a similar experience that lead to the development of &lt;a href="https://racket-lang.org/"&gt;Racket&lt;/a&gt; and the supporting book &lt;a href="https://htdp.org/"&gt;How To Design Programs&lt;/a&gt;. I will probably talk more about how SICP, a beloved textbook, lead to the creation of other books in a future entry.&lt;/p&gt;
&lt;p&gt;Chapter 2 is an introduction to OCaml as a language. I have read a number of tutorials and several chapters on other OCaml books, and "Functional Programming in Ocaml" seems to be one of the clearest explanations on the basics of OCaml. If for some reason you didn't understand the topic well enough from this text, at the end of the chapter the authors tell you which chapters from others OCaml books you should read to get an alternate explanation of the same topics.&lt;/p&gt;
&lt;p&gt;There is a caveat to the previous statement. It will be clear if you have a basic understanding on lambda calculus and you are familiar with how modern  mathematics defines concepts. If you are not familiar with these, the text should be more challenging. &lt;/p&gt;
&lt;p&gt;The exercises for chapter 2 were good. You get to face the difference between integer operators such as +, -, * , /, versus the floating point operators, like +., -., * . / .. &lt;/p&gt;</content><category term="log"></category><category term="ocaml"></category><category term="notes"></category></entry><entry><title>Survival Ruby Reflection</title><link href="https://oskipa.github.io/survival-ruby-reflection.html" rel="alternate"></link><published>2020-03-10T00:00:00-04:00</published><updated>2020-03-10T00:00:00-04:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-03-10:/survival-ruby-reflection.html</id><summary type="html">&lt;p&gt;Ruby has a strong reflection system. This is useful when you are debugging. The more you know, the easier debugging will be. But if you are starting, the following ones will make your life better. &lt;/p&gt;
&lt;p&gt;my_object.inspect&lt;/p&gt;
&lt;p&gt;This will give you a string representation of the object. Very useful …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ruby has a strong reflection system. This is useful when you are debugging. The more you know, the easier debugging will be. But if you are starting, the following ones will make your life better. &lt;/p&gt;
&lt;p&gt;my_object.inspect&lt;/p&gt;
&lt;p&gt;This will give you a string representation of the object. Very useful when programming and debugging.&lt;/p&gt;
&lt;p&gt;my_object.respond_to?(:method_name)&lt;/p&gt;
&lt;p&gt;This one will tell you if the object can respond to a method. So Let's say that you want to call &lt;code&gt;batman.swing&lt;/code&gt;. But can you? You can query the object with &lt;code&gt;batman.respond_to?(:swing)&lt;/code&gt; and it will answer with true or false. Notice how you need to use the colon for the method name when sent as a parameter.&lt;/p&gt;
&lt;p&gt;my_object.methods
   (my_object.methods - Object.new.methods).sort&lt;/p&gt;
&lt;p&gt;The first one will list all the methods that the object can respond to. Depending on the object, the list can be large. Once you look through them, you will discover that many of the methods were not defined in the class itself.  The last version will remove all of the methods that are inherited by Object, the root parent object that most object descend from.&lt;/p&gt;
&lt;p&gt;my_object.method(:method_name).source_location&lt;/p&gt;
&lt;p&gt;This is perhaps the most useful one when looking for code. This incantation will give you the source location for the method that the object responds to.&lt;/p&gt;</content><category term="log"></category><category term="ruby"></category><category term="rails"></category></entry><entry><title>When you Are New To Rails</title><link href="https://oskipa.github.io/when-you-are-new-to-rails.html" rel="alternate"></link><published>2020-03-09T00:00:00-04:00</published><updated>2020-03-09T00:00:00-04:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-03-09:/when-you-are-new-to-rails.html</id><summary type="html">&lt;p&gt;Are you an experienced developer? Have you been tasked to help out in a Rails project? Do you feel confused because there are no 'require' statements and variables seem to mushroom out of nowhere? Does Rails seem too magical to you? &lt;/p&gt;
&lt;p&gt;If this describes you, don't worry. I have gathered …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Are you an experienced developer? Have you been tasked to help out in a Rails project? Do you feel confused because there are no 'require' statements and variables seem to mushroom out of nowhere? Does Rails seem too magical to you? &lt;/p&gt;
&lt;p&gt;If this describes you, don't worry. I have gathered this quick list of pointers to help you find your bearing. Hopefully they will make Rails more logical and less magic.&lt;/p&gt;
&lt;h3&gt;Rails loads all objects found under the 'app' directory into the global scope&lt;/h3&gt;
&lt;p&gt;This is why you don't see 'require' statements. Most objects are available in the global scope.&lt;/p&gt;
&lt;p&gt;Why? Think of it as a radical kind of Don't Repeat Yourself (DRY). Whether you think this is a good idea doesn't matter. This is a Rails convention.&lt;/p&gt;
&lt;p&gt;The title statement may be a gross oversimplification. Yet it will be helpful if you assume this is true unless proven wrong. &lt;/p&gt;
&lt;h3&gt;Carefully read the error messages&lt;/h3&gt;
&lt;p&gt;Ruby errors are usually useful. They tell you what went wrong along with the location where the problem happened.&lt;/p&gt;
&lt;p&gt;Ruby's error stack trace will usually give you the file and line number where the failure has happened. This is key for solving problems. The stack trace will usually have a mix of code from our application and from Ruby libraries, commonly called gems. &lt;/p&gt;
&lt;p&gt;Read them like this: starting from the top, scan line by line until you recognize a file from your application. Identify the file and line number, and start your debugging there. &lt;/p&gt;
&lt;h3&gt;Learn about Ruby's method dispatch and reflection&lt;/h3&gt;
&lt;p&gt;Ruby does what you expect until it doesn't. It will all seem magical and confusing unless you understand how method dispatch works.&lt;/p&gt;
&lt;p&gt;Method dispatch is Ruby's process of looking for a method definition to execute it. When you call 'batman.punch', method dispatch is trying to find where the '.punch' is. It start looking for a definition in the object's class, and then it goes up the object's ancestors. That is the basic idea.  &lt;/p&gt;
&lt;p&gt;The basic idea is also wrong. It is more complicated than that. Read this blog post to get an accurate picture: &lt;a href="https://blog.jcoglan.com/2013/05/08/how-ruby-method-dispatch-works/"&gt;How Ruby method dispatch works&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ruby has a strong reflection system. You can query a lot of information from an object. Using reflection methods is more useful if you understand how method dispatch works. But even if you don't, the following two methods will be useful right away.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;batman.inspect
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;'.inspect' gives you a string representation of the 'batman' object. Useful in the interactive ruby shell (irb), in the debugger, or  when printing to the log or a debugger via a 'puts object.inspect'.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;batman.methods
batman.methods.sort
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;'.methods' gives you an array of all of the methods that the 'batman' object can respond to.  If you add '.sort', then they will be sorted alphabetically.&lt;/p&gt;
&lt;p&gt;If you want more in depth information, read chapters 2 and 3 from the book &lt;a href="https://pragprog.com/book/ppmetr2/metaprogramming-ruby-2"&gt;Metaprogramming Ruby 2&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;The docs: Ruby Doc, Rails Guides, The Rail Way, and the source code&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ruby-doc.org/"&gt;Ruby Doc&lt;/a&gt; should help you if you have questions about the language. The documentation is well written and useful. Ruby is programmer friendly, so if want a method to do something to an array, it most likely exists. I often consult &lt;a href="https://ruby-doc.org/core-2.7.0/Array.html"&gt;Array&lt;/a&gt;, &lt;a href="https://ruby-doc.org/core-2.7.0/Hash.html"&gt;Hash&lt;/a&gt;, &lt;a href="https://ruby-doc.org/core-2.7.0/String.html"&gt;String&lt;/a&gt;, and &lt;a href="https://ruby-doc.org/core-2.7.0/Enumerable.html"&gt;Enumerable&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://guides.rubyonrails.org/"&gt;Rails Guides&lt;/a&gt; should be your first option to learn anything about Rails. For example, if you are learning about Active Record or how to make a configuration change, you should consult this site first.&lt;/p&gt;
&lt;p&gt;You can't find what you are looking for?&lt;/p&gt;
&lt;p&gt;&lt;a href="https://leanpub.com/tr5w"&gt;The Rails Way&lt;/a&gt; should be your next stop. Look for the correct Rails version for your application. It has clear and in-depth explanations on how the different parts of Rails work. &lt;/p&gt;
&lt;p&gt;Still mystified or confused?&lt;/p&gt;
&lt;p&gt;Read &lt;a href="https://github.com/rails/rails"&gt;Rails' source code&lt;/a&gt;. It is recommended for you to look the source code up if all of the above have failed. Read it if you are curious on how something is put together. Read it if you need to check exactly when some feature was added or removed. &lt;/p&gt;
&lt;h3&gt;Use a debugger&lt;/h3&gt;
&lt;p&gt;Ruby has two popular command line debuggers, Pry and Byebug. When you add their name your code, it will open an interactive, command line  shell where you can inspect values, query the variables available in the global space, and do a lot more. &lt;/p&gt;
&lt;p&gt;If you have learned about Ruby's method dispatch and Ruby's reflection methods, the debugger will help you understand how everything gets put together.&lt;/p&gt;
&lt;p&gt;The debugger is perhaps the best tool to understand Rails: use it.&lt;/p&gt;
&lt;p&gt;Identify which debugger your app is using. Learn how to use it, and learn some of its commands. If there isn't one installed, spend some time to get Byebug set up.&lt;/p&gt;</content><category term="log"></category><category term="ruby"></category><category term="rails"></category></entry><entry><title>Using Pelican</title><link href="https://oskipa.github.io/using-pelican.html" rel="alternate"></link><published>2020-03-08T00:00:00-05:00</published><updated>2020-03-08T00:00:00-05:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-03-08:/using-pelican.html</id><summary type="html">&lt;p&gt;I am in the process of cleaning up the site so that I can start writing again. I have decided that I do two kinds of writing. One is very careful; it is essentially writing what should be real articles. The second type are quick learning notes. My ideal site …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am in the process of cleaning up the site so that I can start writing again. I have decided that I do two kinds of writing. One is very careful; it is essentially writing what should be real articles. The second type are quick learning notes. My ideal site would have a section for those more well thought out pieces and one for the quicker, study notes.&lt;/p&gt;
&lt;p&gt;After looking for a while, I decided that Pelican should be able to make it easy for me to get these two things done.&lt;/p&gt;
&lt;p&gt;I have found that I have enjoyed working with Pelican. It is easy to use and easy to customize. The documentation is superb. And if you run into something that is not covered, you can find the answer with a web search.&lt;/p&gt;
&lt;p&gt;I have liked using the make command to build and publish the site. It seems to make things easier.&lt;/p&gt;
&lt;p&gt;Finally, Pelican is easy to understand. After you have worked a bit, you find that most settings are python constants found in the settings page. There are few surprises, for which I am grateful.&lt;/p&gt;</content><category term="log"></category><category term="python"></category><category term="static site"></category></entry><entry><title>Django, first impressions</title><link href="https://oskipa.github.io/django-first-impressions.html" rel="alternate"></link><published>2020-03-07T00:00:00-05:00</published><updated>2020-03-07T00:00:00-05:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-03-07:/django-first-impressions.html</id><summary type="html">&lt;p&gt;I am working through the Django tutorial. Here are some thoughts.&lt;/p&gt;
&lt;p&gt;There really aren't any controllers. Interesting.&lt;/p&gt;
&lt;p&gt;The instant admin area is amazing. &lt;/p&gt;
&lt;p&gt;Pluggable apps are such a great idea.&lt;/p&gt;
&lt;p&gt;The way to define fields seems pretty straight forward. Using a more object style versus a more ruby-like dsl seems …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am working through the Django tutorial. Here are some thoughts.&lt;/p&gt;
&lt;p&gt;There really aren't any controllers. Interesting.&lt;/p&gt;
&lt;p&gt;The instant admin area is amazing. &lt;/p&gt;
&lt;p&gt;Pluggable apps are such a great idea.&lt;/p&gt;
&lt;p&gt;The way to define fields seems pretty straight forward. Using a more object style versus a more ruby-like dsl seems to help because finding the documentation should be easier.&lt;/p&gt;
&lt;p&gt;This is different from other frameworks. I like the idea of having a language module as the components.&lt;/p&gt;</content><category term="log"></category><category term="python"></category><category term="django"></category></entry><entry><title>A Friendly GUI Debugger for Ruby</title><link href="https://oskipa.github.io/ruby-gui-debugger.html" rel="alternate"></link><published>2020-03-01T00:00:00-05:00</published><updated>2020-03-01T00:00:00-05:00</updated><author><name>Hugo Estrada</name></author><id>tag:oskipa.github.io,2020-03-01:/ruby-gui-debugger.html</id><summary type="html">&lt;p&gt;I have been learning Smalltalk. Smalltalk is very similar to Ruby. And Smalltalk have these great programming tools. I am particularly impressed by the object browser and it debugger. Smalltalk was designed so that the system would be learnable. If you wondered how something worked, you could inspect the object …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have been learning Smalltalk. Smalltalk is very similar to Ruby. And Smalltalk have these great programming tools. I am particularly impressed by the object browser and it debugger. Smalltalk was designed so that the system would be learnable. If you wondered how something worked, you could inspect the object and see how it was put together.&lt;/p&gt;
&lt;p&gt;Ruby is very similar to Smalltalk. And pry and byebug along with irb and the rails console  are a command line version of the Smalltalk debugger and object browser. Yet it requires some level of training to use it. You have to know which commands to use that belong to byebug or to ruby to get the information that you are looking for.&lt;/p&gt;
&lt;p&gt;Although I understand that many experienced rubyists may find the command line interface for the debuggers better, a GUI front for byebug would be a great help for beginners. These beginners could be both people new to coding or experienced programmers new to Ruby, who are used to these kinds of tools.&lt;/p&gt;
&lt;p&gt;I am hoping to have the time to create a simple prototype of what this GUI could look like, and then try it out. Who knows? Maybe I will agree with the rest of the community and decide that the command line interface is superior. &lt;/p&gt;</content><category term="log"></category><category term="ruby"></category><category term="metaprogramming"></category><category term="book"></category></entry></feed>